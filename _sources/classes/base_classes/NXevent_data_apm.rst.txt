.. auto-generated by dev_tools.docs.nxdl from the NXDL source base_classes/NXevent_data_apm.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXevent_data_apm (base class)
    ! event_data_apm (base class)
    see: event_data_apm (base class); NXevent_data_apm

.. _NXevent_data_apm:

================
NXevent_data_apm
================

..
    Contributors List

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: Base class to store state and (meta)data of events over the course of an atom pr ...

      Base class to store state and (meta)data of events over the course of an atom probe experiment.

      Having at least one instance for an instance of NXapm is recommended.

      This base class applies the concept of the :ref:`NXevent_data_em` base class to the specific needs
      of atom probe research. Again static and dynamic quantities are split to avoid a duplication
      of information. Specifically, the time interval considered is the entire time
      starting at start_time until end_time during which we assume the pulser triggered pulses.
      These pulses are identified via the pulse_id field. The point in time when each pulse was
      fired can be recovered from analyzing start_time and delta_time.

      Which temporal granularity is adequate depends on the situation and research question.
      Using a model which enables a collection of events offers the most flexible way to cater for
      both atom probe experiments or simulation. To monitor the course of an ion extraction experiment
      (or simulation) it makes sense to track time explicitly via time stamps or implicitly
      via e.g. a clock inside the instrument, such as the clock of the pulser and respective pulse_id.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **p**: Number of pulses collected in between start_time and end_time.

**Groups cited**:
  :ref:`NXinstrument_apm`

.. index:: NXinstrument_apm (base class); used in base class

**Structure**:

  .. _/NXevent_data_apm/start_time-field:

  .. index:: start_time (field)

  **start_time**: (optional) :ref:`NX_DATE_TIME <NX_DATE_TIME>` 

    .. collapse:: ISO 8601 time code with local time zone offset to UTC information included ...

        ISO 8601 time code with local time zone offset to UTC information included
        when the snapshot time interval started.

        If users wish to specify an interval of time that the snapshot should represent
        during which the instrument was stable and configured using specific settings and
        calibrations, the start_time is the start (left bound of the time interval) while
        the end_time specifies the end (right bound) of the time interval.

  .. _/NXevent_data_apm/end_time-field:

  .. index:: end_time (field)

  **end_time**: (optional) :ref:`NX_DATE_TIME <NX_DATE_TIME>` 

    .. collapse:: ISO 8601 time code with local time zone offset to UTC information included ...

        ISO 8601 time code with local time zone offset to UTC information included
        when the snapshot time interval ended.

  .. _/NXevent_data_apm/delta_time-field:

  .. index:: delta_time (field)

  **delta_time**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [p]) {units=\ :ref:`NX_TIME <NX_TIME>`} 

    .. collapse:: Delta time array which resolves for each pulse_id the time difference ...

        Delta time array which resolves for each pulse_id the time difference
        between when that pulse was fired and start_time.

        In summary, using start_time, end_time, delta_time, pulse_id_offset,
        and pulse_id exactly specify the connection between when a pulse was
        fired relative to start_time and in absolute in coordinated world time UTC.

  .. _/NXevent_data_apm/pulse_id_offset-field:

  .. index:: pulse_id_offset (field)

  **pulse_id_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer used to name the first pulse to know if there is an ...

        Integer used to name the first pulse to know if there is an
        offset of the identifiers to zero.

        Identifiers can be defined either implicitly or explicitly.
        For implicit indexing identifiers are defined on the interval
        :math:`[pulse\_id\_offset, pulse\_id\_offset + c - 1]`.

        Therefore, implicit identifier are completely defined by the value of
        pulse_id_offset and cardinality. For example if identifier run from
        -2 to 3 the value for pulse_id_offset is -2.

        For explicit indexing the field identifier has to be used.
        Fortran-/Matlab- and C-/Python-style indexing have specific implicit
        identifier conventions where pulse_id_offset is 1 and 0 respectively.

  .. _/NXevent_data_apm/pulse_id-field:

  .. index:: pulse_id (field)

  **pulse_id**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [p]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Identifier that contextualizes how the detector and pulser of an atom probe ...

        Identifier that contextualizes how the detector and pulser of an atom probe
        instrument follows a sequence of pulses to trigger field evaporation.

        The pulse_id is used to associate thus an information about time
        when quantities have been collected via sampling.

        In virtually all cases the pulser is a blackbox. Depending on how the
        instrument is configured during a measurement, the target
        values and thus also the actual values may change.

        Maybe the first part of the experiment is run at a certain pulse fraction but thereafter
        the pulse_fraction is changed. In this case the field pulse_fraction is a vector which
        collects all measured values of the pulse_fraction, pulse_id is then an equally
        long vector which stores the set of events (e.g. pulsing events) when that value was
        measured.

        This may lead to several cases: In the case that e.g. the pulse_fraction is never changed
        and also exact details not interesting, one stores the set value for the pulse_fraction
        and a single value for the pulse_id e.g. 0 to indicate that the pulse_fraction was set
        at the beginning and it was maintained constant during the measurement.

        If the pulse_fraction was e.g. changed after the 100000th pulse, pulse_fraction is a
        vector with two values. One value for the first and another one for the value from the
        100000th pulse onwards. The values of pulse_id are then [0, 99999] respectively.

  .. _/NXevent_data_apm/instrument-group:

  **instrument**: (optional) :ref:`NXinstrument_apm` 

    .. collapse:: Place to store dynamic metadata of the instrument to document as close as poss ...

        Place to store dynamic metadata of the instrument to document as close as possible
        the state of the instrument during the event, i.e. in between start_time and end_time.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXevent_data_apm/delta_time-field </NXevent_data_apm/delta_time-field>`
* :ref:`/NXevent_data_apm/end_time-field </NXevent_data_apm/end_time-field>`
* :ref:`/NXevent_data_apm/instrument-group </NXevent_data_apm/instrument-group>`
* :ref:`/NXevent_data_apm/pulse_id-field </NXevent_data_apm/pulse_id-field>`
* :ref:`/NXevent_data_apm/pulse_id_offset-field </NXevent_data_apm/pulse_id_offset-field>`
* :ref:`/NXevent_data_apm/start_time-field </NXevent_data_apm/start_time-field>`

**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/main/base_classes/NXevent_data_apm.nxdl.xml

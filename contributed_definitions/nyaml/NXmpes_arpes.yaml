#Pincelli, Rettig, Arora at fhi-berlin.mpg.de, Dobener at hu-berlin.de, 06/2022
#Draft version of a NeXus application definition for angle resolved photoemission.
#This appdef aims to describe data produced from hemispherical anlysers, 
#with at least an angular coordinate and one an energy coordinate.
#It is designed to be extended by other application definitions
#with higher granularity in the data description.

doc: This is an general application definition for angle-resolved multidimensional photoelectron spectroscopy.
category: application
NXmpes_arpes(NXmpes):
    definition:
      \@version:
      enumeration: ["NXmpes_arpes"]
    (NXinstrument):
      angular_resolution(NX_FLOAT):
        unit: NX_ANGLE
      (NXelectronanalyser):
        description:
        angular_resolution(NX_FLOAT):
          exists: recommended
          doc: "Angular resolution of the electron analyser with the current setting. May be linked from a NXcalibration."
          unit: NX_ANGLE
        (NXcollectioncolumn):
          scheme:
            doc: "Scheme of the electron collection column."
            enumeration: [
              "Standard",
              "Angular dispersive",
              "Deflector",
            ]
        (NXenergydispersion):
          scheme:
            enumeration: ["hemispherical"]
          pass_energy(NX_NUMBER):
            unit: NX_ENERGY
          center_energy(NX_NUMBER):
            unit: NX_ENERGY
          diameter(NX_NUMBER):
            unit: NX_LENGTH
          energy_scan_mode:
          entrance_slit(NXaperture):
            shape:
              enumeration: [  
                "straight slits",
                "curved slits",
                "open",
                "grid",
              ]
            (NXtransformations): # Do we need to require the existence/use of a particular 
            #rotation to determine slit orientation?
              doc: "Set of transformations, describing the relative orientation of the slits with respect to the beam coordinate system (.)."
        (NXdetector):
          (NXdata): # Raw signal without calibrated axes.
            exists: recommended
            \@signal:
              enumeration: ['raw']
            raw(NX_NUMBER): # There is a block of numbers named raw.
              doc: "Raw data before calibration."
      depends_on(NX_CHAR):
        doc: "Reference to the transformation describing the orientation of the analyzer relative to the beam."
      (NXtransformations):
        doc: "Set of transformations, describing the relative orientation of the analyzer with respect to the beam coordinate system (.)."
    (NXsample):
      situation:
        enumeration: ["vacuum"]
      # Similar situation here, ca be a single number or a log.
      depends_on(NX_CHAR):
        doc: "Reference to a transformation describing the orientation of the sample relative to the beam coordinate system (.)."
      (NXtransformations):
        doc: "Set of transformations, describing the relative orientation of the sample with respect to the beam coordinate system (.)."
    (NXdata):
      \@signal:
        enumeration: ["data"] # There is an object named data that contains the signal
      \@axes: # There are at least two dimensions, an energy & (at least) an angular coordinate
        enumeration: ["[energy, angular1]"]
      \@energy_indices: # energy is a 1D array
        enumeration: [1]
      \@angular1_indices: # angular is a 1D array
        enumeration: [1]
      \@angular1_depends(NX_CHAR): # In ARPES, the angular coordinate can be generated in different ways.
      # It can be a detector axis in a 2D detector, or scanned by changing the angle of a manipulator.
      # We propose a structure similar to depends_on(NX_CHAR) of NXtransformations to reconstruct the
      # metadata path that produced the angular coordinate. This allows to reconstruct the geometry programmatically.
        doc: "Points to the path to a field defining the axis on which the angular axis depends. 
          For example:
          @angular1_depends: '/entry/sample/transformations/rot_phi' for a manipulator angular scan
          @angular1_depends: '/entry/instrument/detector/sensor_x' for a 2D detector
          @angular1_depends: '/entry/instrument/collectioncolumn/deflector' for a deflector scan
          @angular1_depends: '/entry/process/calibration/angular_calibration/calibrated_axis' for a preprocessed axis."
      \@energy_depends(NX_CHAR): # Similarly, energy can be dispersed according to different strategies
        doc: "Points to the path to a field defining the axis on which the energy axis depends. 
          For example:
          @energy_depends: '/entry/instrument/detector/sensor_y' for a 2D detector
          @energy_depends: '/entry/instrument/energydispersion/center_kinetic_energy' for a swept scan
          @energy_depends: '/entry/process/calibration/energy_calibration/calibrated_axis' for a preprocessed axis."
      data(NX_NUMBER): # There is a block of numbers named data.
        doc: "Represents a measure of two- or more-dimensional photoemission counts, where
          the varied axes are energy, and one or more angular coordinates. Axes traces
          should be linked to the actual encoder position in NXinstrument or calibrated axes in NXprocess."
        unit: NX_ANY

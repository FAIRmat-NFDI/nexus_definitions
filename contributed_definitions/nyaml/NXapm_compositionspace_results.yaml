category: application
doc: |
  Application definition for results of the CompositionSpace tool used in atom probe.
  
  * `A. Saxena et al. <https://www.github.com/eisenforschung/CompositionSpace.git>`_
  
  This is an application definition for the common NFDI-MatWerk/FAIRmat infrastructure
  use case IUC09 that explores how to improve the organization and results storage of the
  CompositionSpace software using NeXus.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  grid_dim: |
    The dimensionality of the grid.
  n_voxels: |
    Total number of voxels.
  n_ions: |
    Total number of ions in the reconstructed dataset.
type: group
NXapm_compositionspace_results(NXobject):
  # by default for appdefs the value of the exists keyword is required unless it is explicitly specified differently
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
        exists: optional
      enumeration: [NXapm_compositionspace_results]
    # can be used for the name of the tool and version but also
    # for if desired all the dependencies and libraries
    programID(NXprogram):
      exists: [min, 1, max, infty]
      program(NX_CHAR):
        \@version(NX_CHAR):
        \@url(NX_CHAR):
          exists: optional
    (NXidentifier):
      exists: optional
    analysis_identifier(NX_UINT):
      exists: recommended
    # config
    config(NXserialized):
      doc: |
        Configuration file that was used in this analysis.
      type(NX_CHAR):
        exists: optional
      path(NX_CHAR):
      algorithm(NX_CHAR):
        exists: recommended
      checksum(NX_CHAR):
        exists: recommended
    # results
    (NXuser):
      exists: optional
    specimen(NXsample):
      doc: |
        Contextualize back to the specimen from which the
        dataset was collected that was here analyzed with
        CompositionSpace tool.
      type(NX_CHAR):
        doc: |
          A qualifier whether the specimen is a real one or a virtual one.
        enumeration: [experiment, simulation]
      atom_types(NX_CHAR):
        doc: |
          List of comma-separated elements from the periodic table that are
          contained in the specimen. If the specimen substance has multiple
          components, all elements from each component must be included in
          `atom_types`.
          
          The purpose of the field is to offer research data management systems an
          opportunity to parse the relevant elements without having to interpret
          these from the resources pointed to by parent_identifier or walk through
          eventually deeply nested groups in data instances.
    voxelization(NXprocess):
      exists: [min, 0, max, 1]
      doc: |
        Step during which the point cloud is discretized to compute element-specific composition fields.
        Iontypes are atomically decomposed to correctly account for the multiplicity of each element that
        was ranged for each ion.
        
        Using a discretization grid that is larger than the average distance between reconstructed ion positions
        reduces computational costs. This is the key idea of the CompositionSpace tool compared to other methods
        used in atom probe for characterizing microstructural features that use the ion position data directly.
      sequence_index(NX_POSINT):
        enumeration: [1]
      cg_grid(NXcg_grid):
        dimensionality(NX_POSINT):
          enumeration: [3]
        cardinality(NX_POSINT):
        origin(NX_NUMBER):
          dim: (grid_dim,)
        symmetry:
          enumeration: [cubic]
        cell_dimensions(NX_NUMBER):
          dim: (grid_dim,)
        extent(NX_POSINT):
          dim: (grid_dim,)
        identifier_offset(NX_INT):
          unit: NX_UNITLESS
        position(NX_NUMBER):
          doc: |
            Position of each cell in Euclidean space.
          unit: NX_LENGTH
          dim: (n_voxels, grid_dim)
        coordinate(NX_INT):
          doc: |
            Discrete coordinate of each voxel.
          unit: NX_DIMENSIONLESS
          dim: (n_voxels, grid_dim)
        # bounding box if needed
        voxel_identifier(NX_UINT):
          doc: |
            For each ion, the identifier of the voxel into which the ion binned.
          unit: NX_UNITLESS
          dim: (n_ions)
      weight(NX_NUMBER):
        doc: |
          Total number of weight (counts for discretization with a rectangular transfer function)
          for the occupancy of each voxel with atoms.
        unit: NX_UNITLESS
        dim: (n_voxels,)
      elementID(NXion):
        exists: [min, 1, max, infty]
        name(NX_CHAR):
          doc: |
            Chemical symbol of the element from the periodic table.
        weight(NX_NUMBER):
          doc: |
            Element-specific weight (counts for discretization with a rectangular transfer function)
            for the occupancy of each voxel with atoms of this element.
          unit: NX_UNITLESS
          dim: (n_voxels,)
    autophase(NXprocess):
      exists: [min, 0, max, 1]
      doc: |
        Optional step during which the subsequent segmentation step is prepared to improve the segmentation.
      sequence_index(NX_POSINT):
        enumeration: [2]
      result(NXdata):
        \@signal(NX_CHAR):
        \@axes(NX_CHAR):
        \@AXISNAME_indices(NX_CHAR):
        title(NX_CHAR):
          exists: recommended
        axis_feature_identifier(NX_UINT):
          doc: |
            Element identifier stored sorted in descending order of feature importance.
          unit: NX_DIMENSIONLESS
          dim: (i,)
          \@long_name(NX_CHAR):
            doc: |
              Axis caption
        axis_feature_importance(NX_FLOAT):
          doc: |
            Element relative feature importance stored sorted in descending order of feature importance.
          unit: NX_DIMENSIONLESS
          dim: (i,)
          \@long_name(NX_CHAR):
            doc: |
              Axis caption
    segmentation(NXprocess):
      exists: [min, 0, max, 1]
      doc: |
        Step during which the voxel set is segmented into voxel sets with different chemical composition.
      pca(NXprocess):
        exists: [min, 1, max, 1]
        doc: |
          PCA in the chemical space (essentially composition correlation analyses).
        sequence_index(NX_POSINT):
          enumeration: [2, 3]
        result(NXdata):
          \@signal(NX_CHAR):
          \@axes(NX_CHAR):
          \@AXISNAME_indices(NX_CHAR):
          title(NX_CHAR):
            exists: recommended
          axis_explained_variance(NX_FLOAT):
            doc: |
              Explained variance values
            unit: NX_DIMENSIONLESS
            dim: (i,)
          axis_pca_dimension(NX_UINT):
            doc: |
              Elements identifier matching those from ENTRY/voxelization/elementID as the principal component analysis.
            unit: NX_UNITLESS
            dim: (i,)
      ic_opt(NXprocess):
        doc: |
          Information criterion minimization.
        sequence_index(NX_POSINT):
          enumeration: [3, 4]
        cluster_analysisID(NXprocess):
          doc: |
            Results of the Gaussian mixture analysis for n_components equal to n_ic_cluster.
          n_ic_cluster(NX_UINT):
            doc: |
              n_components argument of the Gaussian mixture model.
            unit: NX_UNITLESS
          y_pred(NX_UINT):
            doc: |
              y_pred return values of the computation.
            unit: NX_UNITLESS
            dim: (n_voxels,)
        result(NXdata):
          doc: |
            Information criterion as a function of number of n_ic_cluster aka dimensions.
          \@signal(NX_CHAR):
          \@axes(NX_CHAR):
          \@AXISNAME_indices(NX_CHAR):
          title(NX_CHAR):
            exists: recommended
          axis_aic(NX_FLOAT):
            exists: recommended
            doc: |
              Akaike information criterion values
            unit: NX_ANY
            dim: (i,)
          axis_bic(NX_FLOAT):
            doc: |
              Bayes information criterion values
            unit: NX_UNITLESS
            dim: (i,)
          axis_dimension(NX_UINT):
            doc: |
              Actual n_ic_cluster values used
            unit: NX_UNITLESS
            dim: (i,)
    clustering(NXprocess):
      exists: [min, 0, max, 1]
      doc: |
        Step during which the chemically segmented voxel sets are analyzed for their spatial organization
        into different spatial clusters of voxels in the same chemical set but representing individual object
        not-necessarily watertight or topologically closed objects built from individual voxels.
      sequence_index(NX_POSINT):
        enumeration: [4, 5]
      ic_opt(NXobject):
        doc: |
          Respective DBScan clustering result for each segmentation/ic_opt case.
        cluster_analysisID(NXprocess):
          exists: [min, 0, max, infty]
          dbscanID(NXprocess):
            exists: [min, 1, max, infty]  # max as many as n_ic_cluster
            epsilon(NX_FLOAT):
              doc: |
                The maximum distance between voxel pairs in a neighborhood to be considered connected.
              unit: NX_LENGTH
            min_samples(NX_UINT):
              doc: |
                The number of voxels in a neighborhood for a voxel to be considered as a core point.
              unit: NX_UNITLESS
            label(NX_INT):
              doc: |
                Raw label return values
              unit: NX_UNITLESS
              dim: (k,)
            voxel(NX_UINT):
              doc: |
                Voxel identifier
                
                Using these identifiers correlated element-wise with the values in the label array
                specifies for which voxel in the grid clusters from this process were found.
              unit: NX_UNITLESS
              dim: (n_voxels,)
    profiling(NXcs_profiling):
      exists: optional
      current_working_directory(NX_CHAR):
        exists: recommended
      start_time(NX_DATE_TIME):
        exists: recommended
      end_time(NX_DATE_TIME):
        exists: recommended
      total_elapsed_time(NX_NUMBER):
      # number_of_processes(NX_POSINT):
      # number_of_threads(NX_POSINT):
      # number_of_gpus(NX_POSINT):

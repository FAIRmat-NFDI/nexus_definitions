category: base
doc: |
  Base class to hold different coordinate systems and representation conversions.
  
  How many nodes of type NXcoordinate_system_set should be used in an appdef?
  * 0; if no NXcoordinate_system_set and (thus) also no NXcoordinate_system
    is defined in an application definition, the default NeXus `McStas <https://mailman2.mcstas.org/pipermail/mcstas-users/2021q2/001431.html>`_
    coordinate system is assumed. This makes NXcoordinate_system_set and
    NXcoordinate_system base classes backwards compatible to older
    NeXus conventions and classes.
  * 1; if only one NXcoordinate_system_set is defined it should be placed
    as high up in the node hierarchy (ideally right below an instance of NXentry)
    of the application definition tree.
    This NXcoordinate_system_set should at least define one NXcoordinate_system
    instance which should be called mcstas for the sake of improved clarity.
    Alternatively, at least one NXcoordinate_system member of the set should be
    defined and named such that it is clear how this coordinate system is
    typically referred to in a community. Additional NXcoordinate_system members
    should be specified if possible in that same NXcoordinate_system_set instead
    of cluttering them across the tree.
    
    If this is the case it is assumed that the NXcoordinate_system_members
    overwrite the NeXus default McStas coordinate system, i.e. users can thereby
    conveniently and explicitly specify the coordinate system they wish to use.
    
    Users are encouraged to write also explicit and clean depends_on fields
    in all groups which encode information where the interpretation of coordinate
    systems is relevant. If these depends_on hints are not provided, it is
    automatically assumed that all children (to arbitrary depth)
    of that branch and sub-branches below the one in which that
    NXcoordinate_system_set is defined use either the only NXcoordinate_system_set
    instance in that set or the application definition is considered
    underconstrained which should at all costs be avoided and in which case
    again McStas is assumed.
  * 2 and more; as soon as more than one NXcoordinate_system_set is specified
    somewhere in tree different interpretations are possible as to which
    of these coordinate system sets and instances apply or take preference.
    We realize that such ambiguities should at all costs be avoided.
    However, the opportunity for multiple sets and their instances enables to
    have branch-specific coordinate system conventions which could especially
    be useful for deep classes where multiple scientific methods are combined and
    a definition of global translation and conversion tables to convert between
    different coordinate systems are not desired or available for now.
    However, we argue that such possibility makes the interpretation
    eventually unnecessary complicated; instead developers of application definitions
    should try to work for clarity and thus use only one top-level coordinate
    system set.
  
  For these reasons we conclude that the option with one top-level
  NXcoordinate_system_set instance is the preferred choice. If McStas is used,
  is implicit if any NXcoordinate_system_set nor NXcoordinate_system instance
  is specified. However, even in this case it is better to be explicit
  like for every other coordinate system definition to support users with
  interpreting the content and logic behind every instance of the tree.
  
  How to store coordinate systems inside NXcoordinate_system_set?
  Individual coordinate systems should be specified as members of the
  NXcoordinate_system_set instance using instances of NXcoordinate_system.
  
  How many individual instances of NXcoordinate_system to allow within one
  instance of NXcoordinate_system_set?
  
  * 0; This case should be avoided for the sake of clarity but this case could
    mean the authors of the definition meant that McStas is used. We conclude,
    McStas is used in this case.
  * 1; Like above-mentioned this case has the advantage that it is explicit
    and faces no ambiguities. However, in reality typically multiple
    coordinate systems have to be mastered especially for complex and multi-modal
    experiments.
  * 2 or more; If this case is realized the best practice is that in every
    case where a coordinate system should be referred to the respective class
    has a depends_on field which resolves the possible ambiguities which specific
    coordinate systems is referred to. The benefit of this explicit and clear
    specifying of the coordinate system used in every case is that especially
    in combination with having coordinate systems inside deeper branches
    makes up for a very versatile, backwards compatible, but powerful system
    to express different types of coordinate systems using NeXus.
  
  In effect, 1 should be the preferred choice. However, if more than one coordinate
  system is defined for practical purposes, explicit depends_on fields should
  always guide the user for each group and field which of the coordinate system
  one refers to.
type: group
NXcoordinate_system_set(NXobject):
  (NXcoordinate_system):
# How to interpret "depends_on" calls for NXtransformations instances which live
# within an instance of NXcoordinate_system(_set)?
# Depends on cardinality of NXcoordinate_system_set, i.e. how many NXcoordinate_system are defined?
# - 0, the root of an NXtransformation chain i.e. "." means McStas
# - 1, the root of an NXtransformation chain i.e. "." means "that specific CS" i.e. the one defined by the single instance of NXcoordinate_system in the set
# - > 1, "." becomes ambiguous. My suggestion, spell out the name of the specific NXcoordinate_system instance to be used, using "."
#   despite all these, a warning should be raised, like a logic warning (and McStas kick in) or an error (i.e. be forbidden) be raised


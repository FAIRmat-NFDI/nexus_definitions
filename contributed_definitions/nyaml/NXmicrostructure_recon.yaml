category: base
doc: |
  Base class to describe structural aspects and associated descriptors of (micro)structural features.
  
  The continuum or atomic scale description of materials is inherently a model of reality. Such models
  are useful as they enable a coarse graining and categorization of measured or simulated materials
  specifically how their structural features lead to properties i.e. descriptor values.
  Mind that most specimens are thermo-chemo-mechanically treated before they are characterized.
  Therefore, the characterized microstructure may not have probed the same structure as of
  the untreated sample or often bulk material from which the region-of-interest or specimen was probed.
  
  A simulation or experiment can only sample the true structure of the material.
  Fields time and increment enable a quantification of the temporal evolution of a material
  when using multiple instances of NXmicrostructure_recon.
  
  Taking inspiration from `E. E. Underwood <https://doi.org/10.1111/j.1365-2818.1972.tb03709.x>`_
  and E. E. Underwood's book on Quantitative stereology that was published in 1970.
  
  Identifiers can be defined either implicitly or explicitly. For implicit indexing identifiers are defined
  on the interval :math:`[identifier\_offset, identifier\_offset + cardinality - 1]`.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  # one-dimensional observations and so-called linear intercept analysis we observe
  # one-dimensional sections of either projections (see below) or true one-dimensional cuts across a volume of material
  n_icept: |
    The number of linear intercepts defined.
  n_c_one: |
    The number of crystal projections segmented by crossing (projected or real) interfaces.
  n_i_one: |
    The number of crossings
  # two-dimensional projections of three-dimensional objects using E. E. Underwood notation
  # crystals/grains are projections that are delineated by projections of interface, i.e. interface lines which meet at projections of triple lines aka triple points
  n_c_two: |
    The number of crystal projections.
  n_i_two: |
    The number of interface projections.
  n_t_two: |  
    The number of assumed triple line projections aka triple points.
  # three-dimensional real objects, volumetrically characterized
  # crystals are delineated by interfaces that are delineated by triple lines that meet at quad junctions
  n_c: |
    The number of crystals. Grain and sub-grain are synonyms for crystal.
  n_i: |
    The number of interfaces. Grain boundary and phase boundary are subclasses of interface.
  n_t: |
    The number of triple lines.
  n_q: |
    The number of quadruple junctions.
type: group
NXmicrostructure_recon(NXobject):
  # as e.g. a result of one grain reconstruction with an algorithm with MTex or the grain/phase i.e. interface network reconstruction software in commercial tools
  # the idea is we may wish to run as many grain reconstructions as we want and add details about the processing used for each of them if needed
  comment(NX_CHAR):
    doc: |
      Discouraged free text field for leaving comments.
  time(NX_NUMBER):
    doc: |
      Measured or simulated physical time stamp for this snapshot.
      Not to be confused with wall-clock timing or profiling data.
    unit: NX_TIME
  iteration(NX_INT):
    doc: |
      Iteration or increment counter.
    unit: NX_UNITLESS
  configuration(NXprocess):
    doc: |
      The configuration and parameterization of the reconstruction algorithm
      whereby the microstructural features were identified.
    dimensionality(NX_POSINT):
      doc: |
        Dimensionality of Euclidean space in which the analysis is conducted.
        
        This field can be used e.g. by a research data management system to identify
        if the description specifies one-, two-, or three-dimensional representations.
      unit: NX_UNITLESS
      enumeration: [1, 2, 3]
    algorithm(NX_CHAR):
      doc: |
        Algorithm is used to reconstruct the features.
      enumeration: [unknown, disorientation_clustering, fast_multiscale_clustering, markov_chain_clustering]
    disorientation_threshold(NX_NUMBER):
      doc: |
        Threshold to define at which disorientation angle to assume
        two crystalline regions have a significant orientation difference
        which warrants to argue that there is an interface between the
        two regions.
      unit: NX_ANGLE
  # use controlled vocabulary terms point, line, surface, volume, use singular term
  (NXcg_point_set):
  (NXcg_polyline_set):
  (NXcg_triangle_set):
  (NXcg_polyhedron_set):
  (NXcsg):
  # domain-specific, i.e. microstructural features
  crystal(NXobject):
    doc: |
      One- or two-dimensional projections, or three-dimensional representation of crystals.
      
      Crystals can be grains of different phases, precipitates, dispersoids, there are many
      terms used in specifically the materials engineering community.
      
      Typically, as observed e.g. on the surface of a sample using with optical or electron microscopy
      or as simulated as a set of pixel or evolving polygons and their polyline boundaries.
    # maybe some enum what this is
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_point_set` for a one-dimensional representation as only a projection is available
        * :ref:`NXcg_polyline_set` or :ref`NXcg_polygon_set` for a two-dimensional representation as only a projection is available
        * :ref:`NXcg_polyhedron_set` for a three-dimensional representation
        * :ref:`NXcg_grid` for regularly pixelated or voxelated representation
        
        Most microscopy techniques support to generate only a two-dimensional
        representation (projection) of the characterized material.
    number_of_crystals(NX_UINT):
      doc: |
        Number of crystals.
      unit: NX_UNITLESS
    number_of_phases(NX_UINT):
      doc: |
        How many phases are distinguished
      unit: NX_UNITLESS
    crystal_identifier_offset(NX_INT):
      doc: |
        Integer offset whereby to distinguish crystals.
      unit: NX_UNITLESS
    crystal_identifier(NX_INT):
      doc: |
        Identifier used for crystals for explicit indexing.
      unit: NX_UNITLESS
      # n_c_one, n_c_two, n_c
    phase_identifier_offset(NX_INT):
      doc: |
        Integer offset whereby the identifier of the first member
        of the set differs from zero.
      unit: NX_UNITLESS
    phase_identifier(NX_INT):
      doc: |
        Identifier used for phase for explicit indexing.
      unit: NX_UNITLESS
      # n_c_one, n_c_two, n_c
    # properties
    # DESCRIPTOR VALUES, SUMMARY STATISTICS
    boundary_contact(NX_BOOLEAN):
      doc: |
        True, if the crystal makes contact with the edge of the ROI false otherwise.
      # n_c_one, n_c_two, n_c
    orientation_spread(NX_NUMBER):
      doc: |
        Average disorientation angle between individual orientation of the
        crystal at probed positions (weighted by area of that position) versus
        the average disorientation of the crystal.
      unit: NX_ANGLE
      # n_c_one, n_c_two, n_c
    (NXrotation_set):
    length(NX_NUMBER):
      doc: |
        Length of each crystal
      unit: NX_LENGTH  # m
    area(NX_NUMBER):
      doc: |
        Area of each crystal.
      unit: NX_AREA  # m^2
    volume(NX_NUMBER):
      doc: |
        Volume of each crystal
      unit: NX_VOLUME  # m^3
  interface(NXobject):
    doc: |
      One- or two-dimensional projections, or three-dimensional representation of interfaces between crystals
      as topological entities to dual_junctions.
      
      Most relevant interfaces are grain and phase boundaries but factually interfaces can also be between
      the environment and crystals exposed at the surface of the specimen.
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_point_set` for a one-dimensional representation as only a projection is available
        * :ref:`NXcg_polyline_set` for a two-dimensional representation as only a projection is available
        * :ref:`NXcg_grid` for regularly pixelated or voxelated representation using (boolean) masks
        
        Most microscopy techniques support to generate only a two-dimensional
        representation (projection) of the characterized material.
    number_of_interfaces(NX_UINT):
      doc: |
        Number of interfaces.
      unit: NX_UNITLESS
    identifier_offset(NX_INT):
      doc: |
        Integer which specifies the first index to be used for distinguishing interfaces.
      unit: NX_UNITLESS
    identifier(NX_INT):
      doc: |
        Integer used to distinguish features for explicit indexing.
      unit: NX_UNITLESS
      # n_i_one, n_i_two, n_i
    # topological view, interface specification through the the pair of crystals sharing an interface
    crystal(NX_INT):
      doc: |
        Set of pairs of crystal_identifier.
      unit: NX_UNITLESS
      dim: (i, 2)  #  with i == n_i_one, n_i_two
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier instance to resolve ambiguities.
    # topological view, interface specification through the pair of triple line projections (i.e. triple points) adjoining the interface
    triple_junction(NX_INT):
      doc: |
        Set of pairs of triple_junction_identifier.
      unit: NX_UNITLESS
      dim: (j, 2)  # with j == n_i_two
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier instance to resolve ambiguities.
    # DESCRIPTOR VALUES
    length(NX_NUMBER):
      doc: |
        The length of the interface.
        
        This is not necessarily the same as the length of the individual
        polyline segments whereby the interface is discretized.
      unit: NX_LENGTH
      # n_i_one, n_i_two, n_i
    area(NX_NUMBER):
      doc: |
        Surface area
      unit: NX_AREA
  triple_junction(NXobject):
    doc: |
      Projections of or representations of junctions at which interfaces between.
      
      Junctions can be triple lines, triple points as their projections, junctions observed
      between crystals at the specimen and its surface (including wetting phenomena)
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_point_set` for a one-dimensional representation as only a projection is available
        * :ref:`NXcg_polyline_set` for a two-dimensional representation as only a projection is available
        * :ref:`NXcg_grid` for regularly pixelated or voxelated representation using (boolean) masks
        
    # another view to describe a triple junction is via its topology/connection expressed either via
    # i) triplet of interface identifier
    number_of_junctions(NX_UINT):
      doc: |
        Number of triple junctions.
      unit: NX_UNITLESS
    identifier_offset(NX_INT):
      doc: |
        Integer offset where to start counting instances of the set of junctions.
      unit: NX_UNITLESS
    identifier(NX_INT):
      doc: |
        Identifier used for specifiying all members of the set of junctions.
      unit: NX_UNITLESS
      # n_t_one, n_t_two, n_t
    # example i) triple point locations explicitly
    position(NX_INT):
      doc: |
        Set of identifier for positions whereby to identify the location of each junction.
      unit: NX_UNITLESS
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier whereby to resolve ambiguities.
    # example ii) three interface projections or interface segments adjoin a triple line and point
    interface(NX_INT):
      doc: |
        Set of tuples of identifier of features connected to the junction.
      unit: NX_UNITLESS
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier to instances of interface identifiers whereby to resolve ambiguities.
    # example iii) e.g. three polyline segments enter a triple point
    polyline(NX_INT):
      doc: |
        Set of tuples of identifier for representation of discretized features connected to the junction.
      unit: NX_UNITLESS
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier to instances of NXcg primitives whereby to resolve ambiguities.
    # DESCRIPTOR VALUES

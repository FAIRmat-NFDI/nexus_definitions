category: base
doc: |
  Base class to describe a microstructure, its structural aspects, associated descriptors, properties.
  
  Whether one uses a continuum or atomic scale description of materials, these are always a model only of
  the true internal structure of a material. Such models are useful as they enable a coarse-graining and
  categorizing of properties and representational aspects from which measured or simulated descriptions
  can be correlated with properties, i.e. descriptor values.
  
  Keep in mind that most specimens are thermo-chemo-mechanically processed prior characterization.
  Therefore, the characterized microstructure may not have probed the same structure as of the untreated
  sample from which the region-of-interests on the specimen were sampled.
  
  Fields such as time and increment enable a quantification of the spatiotemporal evolution of a materials'
  structure by using multiple instances of NXmicrostructure. Both measurements and simulation virtually
  always sample this evolution. Most microscopy techniques support to generate only a two-dimensional
  representation (projection) of the characterized material. Often materials are characterized only for
  specific states or via sampling coarsely in time relative to the timescale at which the
  physical phenomena take place. This is typically a compromise between the research questions at hand and technical surplus practical limitations.
  
  The term microstructural feature covers here crystals and all sorts of crystal defects within the material. 
  A key challenge with the description of representations and properties of microstructural features is that
  features with different dimensionality exist and combinations of features of different dimensionality are
  frequently expected to be documented with intuitive naming conventions using flat property lists.
  For these key-value dictionaries often folksonomies are used. These can be based on ad hoc documentation
  of such dictionaries in the literature and the metadata section of public data repositories.
  
  NXmicrostructure is an attempt to standardize these descriptions stronger.
  
  The descriptive variety is large especially for junctions. Like crystals and interfaces, junctions are features in
  three-dimensional Euclidean space even if they are formed maybe only through a monolayer or pearl chain of atoms.
  Either way the local atomic and electronic environment is different compared to the situation of an ideal crystal,
  which gives typically rise to a plethora of configurations of which some yield useful properties.
  
  Like crystals and interfaces, junctions are assumed to represent groups of atoms that have specific descriptor values
  which are different to other features. Taking an example, a triple junction is practically a three-dimensional defect as its atoms
  are arranged in three-dimensional space but the characteristics of that defect can often be reduced to a lower-dimensional
  description such as a triple point or a triple line. Therefore, different representations can be used to describe the location,
  shape, and structure of the defect. As different types of crystal defects can interact, there is a substantial number of
  in principle characterizable and representable objects. Take again a triple line as an example. It is a tubular feature built from three
  adjoining interfaces. However, dislocations as line defects can interact with triple lines. Therefore, one can also argue that
  along a triple line there can be dislocation-line-triple-line junctions, likewise dislocations form own junctions.
  
  It is not the aim of this base class to cover all these cases, rather this base class currently provides examples how the
  typically most relevant types of features can be represented using a combination of base classes in NeXus. Currently,
  these are crystals, interfaces, triple lines, quadruple junctions.
  
  The description attempt here took inspiration from `E. E. Underwood <https://doi.org/10.1111/j.1365-2818.1972.tb03709.x>`_
  and E. E. Underwood's book on Quantitative Stereology published 1970 to categorize features based on their dimensionality.
  
  Identifiers can be defined either implicitly or explicitly. Identifiers for implicit indexing are defined
  on the interval :math:`[identifier\_offset, identifier\_offset + cardinality - 1]`.
# , and Volterra line defects (dislocation, disconnection, disclination).
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  # one-dimensional sections of either projections (see below) or true one-dimensional cuts across a volume of material
  n_c_one: |
    The number of one-dimensional crystal projections
  n_i_one: |
    The number of one-dimensional interface projections
  # n_<line defect>_one, n_<point defect>_one are hypothetical scenarios such as line defect hitting right into a point
  # two-dimensional projections of three-dimensional objects using E. E. Underwood notation
  # crystals/grains are projections that are delineated by projections of interface, i.e. interface lines which meet at projections of triple lines aka triple points
  n_c_two: |
    The number of two-dimensional crystal projections
  n_i_two: |
    The number of two-dimensional interface projections
  n_tj_two: |
    The number of two-dimensional triple line projections
  n_ld_two: |
    The number of two-dimensional line defect projections
  # n_<point defect>_two is the hypothetical scenario when a point defect lies right in the projection plane
  # three-dimensional real objects, volumetrically characterized
  # crystals are delineated by interfaces that are delineated by triple lines that meet at quad junctions
  n_c_three: |
    The number of crystals (grain and sub-grain are exact synonyms for crystal).
  n_i_three: |
    The number of interfaces (grain boundary and phase boundary are subclasses of interfaces).
  n_tj_three: |
    The number of triple junctions (triple line is a exact synonym for triple junction, triple point is projection of a triple junction).
  n_qj_three: |
    The number of quadruple junctions.
#   n_ld_three:
#     The number of line defects.
  d: |
    The dimensionality of the representation that needs to match the value for configuration/dimensionality
type: group
NXmicrostructure(NXobject):
  # as e.g. a result of one grain reconstruction with an algorithm with MTex or the grain/phase i.e. interface network reconstruction software in commercial tools
  # the idea is we may wish to run as many grain reconstructions as we want and add details about the processing used for each of them if needed
  comment(NX_CHAR):
    doc: |
      Discouraged free-text field for leaving comments.
  date(NX_DATE_TIME):
    doc: |
      ISO8601 with offset to local time zone included when a timestamp is required.
  time(NX_NUMBER):
    doc: |
      Measured or simulated physical time stamp for this microstructure snapshot.
      Not to be confused with wall-clock timing or profiling data.
    unit: NX_TIME
  iteration(NX_INT):
    doc: |
      Iteration or increment counter.
    unit: NX_UNITLESS
  configuration(NXprocess):
    doc: |
      Group where to store details about the configuration and parameterization of algorithms
      used whereby microstructural features were identified.
    dimensionality(NX_POSINT):
      doc: |
        Dimensionality of Euclidean space in which the analysis is performed.
        
        This field can be used e.g. by a research data management system to identify
        if the description specifies one-, two-, or three-dimensional microstructural representations.
      unit: NX_UNITLESS
      enumeration: [1, 2, 3]
    algorithm(NX_CHAR):
      doc: |
        Algorithm whereby interfaces between crystals were reconstructed.
        
        * Disorientation clustering groups nearby material points based on their crystallographic disorientation
        * Fast multiscale clustering based on `D. Kushnir et al. <https://doi.org/10.1016/j.patcog.2006.04.007>`_
        * Markov chain clustering `F. Niessen et al. <https://doi.org/10.1107/S1600576721011560>`_
        
      # could also be used to specify algorithms for precipitate detection
      enumeration: [unknown, disorientation_clustering, fast_multiscale_clustering, markov_chain_clustering]
    disorientation_threshold(NX_NUMBER):
      doc: |
        Threshold to define at which disorientation angle to assume two crystalline regions have a significant
        orientation difference that warrants to assume that there exists an interface between the two regions.
      unit: NX_ANGLE
    (NXprogram):
      doc: |
        The program with which the microstructure was reconstructed.
  # use controlled vocabulary terms grid, point, line, surface, volume, use singular term when instantiating
  (NXcg_grid):
  (NXcg_point_set):
  (NXcg_polyline_set):
  (NXcg_triangle_set):
  (NXcg_polygon_set):
  (NXcg_polyhedron_set):
  # constructive solid geometry to describe curved features
  # (NXcsg):
  # (NXcontinuous_function):
  # examples for specific frequently discussed microstructural features
  crystal(NXobject):
    doc: |
      One- or two-dimensional projections, or three-dimensional representations of crystals.
      
      An example for a volume bounded by other crystal defects. Crystals can be grains of
      different phases, precipitates, dispersoids; there are many terms used specifically in
      the materials engineering community.
      
      Typically, crystals are measured on the surface of a sample via optical or electron microscopy.
      Using X-ray diffraction methods crystals can be observed in bulk specimens.
      
      Crystals are represented by a set of pixel, voxel, or polygons and their polyline boundaries.
      In rare cases the volume bounded gets represented using constructive solid geometry approaches.
    # maybe some enum what this is
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_polyline_set` for a one-dimensional representation as only a projection is available (like in linear intercept analysis)
        * :ref:`NXcg_polygon_set` for a two-dimensional representation as only a projection is available (like in most experiments)
        * :ref:`NXcg_polyhedron_set` or :ref:`NXcg_grid` for regularly pixelated or voxelated representation in one, two, or three dimensions
          (like in computer simulations or 3D experiments)
        
        which represent the geometrical entities of the discretization.
    number_of_crystals(NX_UINT):
      doc: |
        How many crystals are distinguished.
        
        Crystals are listed irrespective of the phase to which these are assigned.
      unit: NX_UNITLESS
    number_of_phases(NX_UINT):
      doc: |
        How many phases are distinguished.
        
        Phases are typically distinguished based on statistical thermodynamics argument and crystal structure.
      unit: NX_UNITLESS
    crystal_identifier_offset(NX_INT):
      doc: |
        First identifier whereby to identify crystals implicitly.
      unit: NX_UNITLESS
    crystal_identifier(NX_INT):
      doc: |
        Identifier whereby to identify each crystal explicitly.
      unit: NX_UNITLESS
      dim: (i,)  # with i = n_c_one or n_c_two or n_c_three
    phase_identifier_offset(NX_INT):
      doc: |
        First identifier whereby to identify phases implicitly.
      unit: NX_UNITLESS
    phase_identifier(NX_INT):
      doc: |
        Identifier whereby to identify phase for each crystal explicitly.
      unit: NX_UNITLESS
      dim: (i,)  # with i = n_c_one or n_c_two or n_c_three for all use of i in of fields of group crystal
    # EXAMPLES FOR DESCRIPTOR VALUES, SUMMARY STATISTICS
    boundary_contact(NX_BOOLEAN):
      doc: |
        True or false value, one for each crystal, to communicate whether that feature makes contact with the edge of the ROI.
      dim: (i,)
    orientation_spread(NX_NUMBER):
      doc: |
        Average disorientation angle for each crystal between individual orientations
        of that crystal evaluated as a summary statistic for all probed positions vs the
        average disorientation of that crystal.
      unit: NX_ANGLE
      dim: (i,)
    length(NX_NUMBER):
      doc: |
        Length of each crystal
      unit: NX_LENGTH  # m
      dim: (i,)
    area(NX_NUMBER):
      doc: |
        Area of each crystal.
      unit: NX_AREA  # m^2
      dim: (i,)
    volume(NX_NUMBER):
      doc: |
        Volume of each crystal
      unit: NX_VOLUME  # m^3
      dim: (i,)
  interface(NXobject):
    doc: |
      One- or two-dimensional projections or three-dimensional representation of interfaces
      between crystals as topological entities equivalent to dual_junctions.
      
      An example for a surface defect. Most important are interfaces such as grain and phase boundaries
      but factually interfaces also exist between the environment and crystals exposed at the
      surface of the specimen or internal surfaces like between crystals, cracks, or pores.
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_point_set` for a one-dimensional representation as only a projection is available (as in linear intercept analyses)
        * :ref:`NXcg_polyline_set` or :ref:`NXcg_polygon_set` for a two-dimensional representation as only a projection is available (like in most experiments)
        * :ref:`NXcg_grid` for regularly pixelated or voxelated representation in one, two, or three dimensions using (boolean) masks
          (like in computer simulations or 3D experiments)
        
        which represent the geometrical entities of the discretization.
    number_of_interfaces(NX_UINT):
      doc: |
        How many interfaces are distinguished.
      unit: NX_UNITLESS
    identifier_offset(NX_INT):
      doc: |
        First identifier whereby to identify interfaces implicitly.
      unit: NX_UNITLESS
    identifier(NX_INT):
      doc: |
        Identifier whereby to identify each interface explicitly.
      unit: NX_UNITLESS
      dim: (i,)  # with i == n_i_one or n_i_two or n_i_three for all fields of group interface
    # topological view, interface specification through the the pair of crystals sharing an interface
    crystal_identifier(NX_INT):
      doc: |
        Set of pairs of crystal_identifier for each interface.
      unit: NX_UNITLESS
      dim: (i, 2)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifiers whereby to resolve ambiguities.
    phase_identifier(NX_INT):
      doc: |
        Set of pairs of phase_identifier for each interface.
      unit: NX_UNITLESS
      dim: (i, 2)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifiers whereby to resolve ambiguities.
    # topological view, interface specification through the pair of triple line projections (i.e. triple points) adjoining the interface
    triple_junction_identifier(NX_INT):
      doc: |
        Set of pairs of triple_junction_identifier for each interface.
      unit: NX_UNITLESS
      dim: (i, 2)  # with i == n_i_two but junctions can be points or lines!
      \@use_these(NX_CHAR):
        doc: |
          The specific identifiers whereby to resolve ambiguities.
    # EXAMPLES FOR DESCRIPTOR VALUES
    boundary_contact(NX_BOOLEAN):
      doc: |
        True or false value, one for each crystal, to communicate whether that feature makes contact with the edge of the ROI.
      dim: (i,)
    surface_energy(NX_NUMBER):
      doc: |
        Gibbs free surface energy for each interface.
      unit: NX_ANY  # J/m^2
      dim: (i,)
    mobility(NX_NUMBER):
      doc: |
        Non-intrinsic mobility of each interface.
      unit: NX_ANY  # m^4/Js
      dim: (i,)
    length(NX_NUMBER):
      doc: |
        The length of each interface if only projections are available.
        
        This is not necessarily the same as the length of the individual
        polyline segments whereby the interface is discretized.
      unit: NX_LENGTH
      dim: (i,)
    area(NX_NUMBER):
      doc: |
        The surface area of all interfaces.
      unit: NX_AREA
      dim: (i,)
  triple_junction(NXobject):
    doc: |
      Projections or representations of junctions at which three interfaces meet.
      
      An example for a line defect. Triple junctions are characterized as triple lines or triple points as their projections,
      or junctions observed between crystals (at the specimen surface exposed to an environment)
      (including wetting phenomena) or inside the specimen (crack, pores).
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_point_set` for a one-dimensional representation as only a projection is available (like in most experiments)
        * :ref:`NXcg_polyline_set` for a two-dimensional representation as only a projection is available
        * :ref:`NXcg_polygon_set` for a two-dimensional representation in the (seldom) case of sufficient spatial resolution
          and the line in the projection plane or cases where triple junction locations are approximated e.g. using a set of triangles
        * :ref:`NXcg_polyhedron_set` for a three-dimensional representation via e.g. a representation of Voronoi cells about atoms
        * :ref:`NXcg_grid` for regularly pixelated or voxelated representation in one, two, or three dimensions using (boolean) masks
        
        which represent the geometrical entities of the discretization.
    number_of_junctions(NX_UINT):
      doc: |
        Number of triple junctions.
      unit: NX_UNITLESS
    identifier_offset(NX_INT):
      doc: |
        First identifier to identify triple junctions implicitly.
      unit: NX_UNITLESS
    identifier(NX_INT):
      doc: |
        Identifier to identify each triple junction explicitly.
      unit: NX_UNITLESS
      dim: (i,)  # with i == n_tj_one, n_tj_two, n_tj_three for all fields in group triple_junction
    # various strategies are used to talk about aspects of triple junctions, some examples follow
    # example i) triple points as projections of triple lines have locations
    location(NX_INT):
      doc: |
        Set of identifier for positions whereby to identify the location of each junction.
      unit: NX_UNITLESS
      dim: (i,)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifiers whereby to resolve ambiguities.
    position(NX_INT):
      doc: |
        Explicit positions.
      unit: NX_LENGTH
      dim: (i, d)
    crystal_identifier(NX_INT):
      doc: |
        Set of tuples of identifier of crystals connected to the junction for each triple junction.
      unit: NX_UNITLESS
      dim: (i, 3)
    # example ii) three interfaces (maybe projections of them) meet at a triple junction
    interface_identifier(NX_INT):
      doc: |
        Set of tuples of identifier of interfaces connected to the junction for each triple junction.
      unit: NX_UNITLESS
      dim: (i, 3)
      \@use_these(NX_CHAR):
        doc: |
          The specific interface identifiers whereby to resolve ambiguities.
    # example iii) three polyline segments meet at a triple junction, polyline segments of discretized interface segments
    polyline_identifier(NX_INT):
      doc: |
        Set of tuples of identifier for polyline segments connected to the junction for each triple junction.
      unit: NX_UNITLESS
      dim: (i, 3)
      \@use_these(NX_CHAR):
        doc: |
          The specific polyline identifiers whereby to resolve ambiguities.
    # example iv) e.g. crystals of three different phases meet at a triple junction
    # EXAMPLES FOR DESCRIPTOR VALUES
    boundary_contact(NX_BOOLEAN):
      doc: |
        True or false value, one for each crystal, to communicate whether that feature makes contact with the edge of the ROI.
      dim: (i,)
    line_energy(NX_NUMBER):
      doc: |
        Specific line energy of each triple junction
      unit: NX_ANY
      dim: (i,)
    mobility(NX_NUMBER):
      doc: |
        Non-intrinsic mobility of each triple junction.
      unit: NX_ANY
      dim: (i,)
    length(NX_NUMBER):
      doc: |
        The length of each triple junction.
        
        This is not necessarily the same as the length of the individual
        polyline segments whereby the junction is discretized.
      unit: NX_LENGTH
      dim: (i,)
    volume(NX_NUMBER):
      doc: |
        The volume of the each triple junction
      unit: NX_VOLUME
      dim: (i,)
  quadruple_junction(NXobject):
    doc: |
      Quadruple junctions as a region where four crystals meet.
      
      An example for a point defect.
    representation(NX_CHAR):
      doc: |
        Reference to an instance of:
        
        * :ref:`NXcg_point_set`
        * :ref:`NXcg_grid` for regularly pixelated or voxelated representation in one, two, or three dimensions using (boolean) masks
        
    number_of_junctions(NX_UINT):
      doc: |
        Number of quadruple junctions.
      unit: NX_UNITLESS
    identifier_offset(NX_INT):
      doc: |
        First identifier to identify quadruple junctions implicitly.
      unit: NX_UNITLESS
    identifier(NX_INT):
      doc: |
        Identifier to identify each quadruple junction explicitly.
      unit: NX_UNITLESS
      dim: (i,)  # with i == n_qj_three or n_qj_two
    # different scenarios can be envised how quadruple_junctions are discussed
    # example i) quadruple point locations explicitly
    location(NX_INT):
      doc: |
        Set of identifier for positions whereby to identify the location of each junction.
      unit: NX_UNITLESS
      dim: (i,)
      \@use_these(NX_CHAR):
        doc: |
          The specific point identifier whereby to resolve ambiguities.
    position(NX_INT):
      doc: |
        Explicit positions.
      unit: NX_LENGTH
      dim: (i, 3)
    # example ii) four crystals meet at a quadruple junction
    crystal_identifier(NX_INT):
      doc: |
        Set of tuples of identifier of crystals connected to the junction for each junction.
      unit: NX_UNITLESS
      dim: (i, 4)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier to instances of crystal identifiers whereby to resolve ambiguities.
    interface_identifier(NX_INT):
      doc: |
        Set of tuples of identifier of interfaces connected to the junction for each junction.
      unit: NX_UNITLESS
      dim: (i, 4)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier to instances of interface identifiers whereby to resolve ambiguities.
    # example iii) e.g. three triple lines meet at a quadruple junction
    triple_junction_identifier(NX_INT):
      doc: |
        Set of tuples of identifier for triple junctions connected to the junction for each quadruple junction.
      unit: NX_UNITLESS
      dim: (i, 3)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier to instances of triple junction identifiers whereby to resolve ambiguities.
    # example iv) crystals of eventually four different phases meet at a quadruple junction
    phase_identifier(NX_INT):
      doc: |
        Set of tuples of identifier for phases of crystals connected to the junction for each quadruple junction.
      unit: NX_UNITLESS
      dim: (i, 4)
      \@use_these(NX_CHAR):
        doc: |
          The specific identifier to instances of phase identifier whereby to resolve ambiguities.
    # EXAMPLES FOR DESCRIPTOR VALUES
    boundary_contact(NX_BOOLEAN):
      doc: |
        True or false value, one for each crystal, to communicate whether that feature makes contact with the edge of the ROI.
      dim: (i,)
    energy(NX_NUMBER):
      doc: |
        Energy of the quadruple_junction as a defect.
      unit: NX_ANY
      dim: (i,)
    mobility(NX_NUMBER):
      doc: |
        Non-intrinsic mobility of each quadruple_junction.
      unit: NX_ANY
      dim: (i,)

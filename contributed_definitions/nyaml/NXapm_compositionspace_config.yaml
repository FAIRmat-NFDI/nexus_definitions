category: application
doc: |
  Application definition for a configuration of the CompositionSpace tool used in atom probe.
  
  * `A. Saxena et al. <https://www.github.com/eisenforschung/CompositionSpace.git>`_
  
  This is an application definition for the common NFDI-MatWerk/FAIRmat infrastructure
  use case IUC09 that explores how to improve the organization and results storage of the
  CompositionSpace tool by using the NeXus data model and semantics.
type: group
NXapm_compositionspace_config(NXobject):
  # by default for appdefs the value of the exists keyword is required unless it is explicitly specified differently
  (NXentry):
    exists: [min, 1, max, 1]
    definition(NX_CHAR):
      \@version(NX_CHAR):
        exists: optional  # because NXroot should already have the correct NeXus version used
      enumeration: [NXapm_compositionspace_config]
    config(NXobject):
      (NXidentifier):
        exists: optional
      analysis_identifier(NX_UINT):
        exists: recommended
      reconstruction(NXserialized):
        doc: |
          Specification of the tomographic reconstruction used for this analysis.
          Typically, reconstructions in the field of atom probe tomography are communicated via
          files which store at least reconstructed ion positions and mass-to-charge-state-ratio
          values. Container files like HDF5 though can store multiple reconstructions.
          Therefore, the position and mass_to_charge concepts point to specific instances
          to use for this analysis.
        type(NX_CHAR):
          exists: optional
        path(NX_CHAR):
        checksum(NX_CHAR):
          exists: recommended
        algorithm(NX_CHAR):
          exists: recommended
        position(NX_CHAR):
          doc: |
            Name of the node which resolves the reconstructed
            ion position values to use for this analysis.
        mass_to_charge(NX_CHAR):
          exists: optional
          doc: |
            Name of the node which resolves the mass-to-charge-state ratio
            values for each reconstructed ion to use for this analysis.
      ranging(NXserialized):
        doc: |
          Specification of the ranging definitions used for this analysis.
          
          Indices start from 1. The value 0 is reserved for the null model of unranged positions whose
          iontype is unknown_type. The value 0 is also reserved for voxels that lie outside the dataset.
        type(NX_CHAR):
          exists: optional
        path(NX_CHAR):
        checksum(NX_CHAR):
          exists: recommended
        algorithm(NX_CHAR):
          exists: recommended
        ranging_definitions(NX_CHAR):
          doc: |
            Name of the (parent) node directly below which the ranging definitions for (molecular) ions are stored.
      voxelization(NXprocess):
        doc: |
          Step during which the point cloud is discretized to compute element-specific composition fields.
          Iontypes are atomically decomposed to correctly account for the multiplicity of each element that
          was ranged for each ion.
        edge_length(NX_NUMBER):
          doc: |
            Edge length of cubic voxels building the 3D grid that is used for discretizing the point cloud.
          unit: NX_LENGTH
      autophase(NXprocess):
        doc: |
          Optional step during which the subsequent segmentation step is prepared with the aim to eventually
          reduce the dimensionality of the chemical space in which the machine learning model works.
          
          In this step a supervised reduction of the dimensionality of the chemical space is quantified using
          the (Gini) feature importance of each element to suggest which columns of the composition matrix
          should be taken for the subsequent segmentation step.
        use(NX_BOOLEAN):
          doc: |
            Was the automated phase assignment used?
        initial_guess(NX_POSINT):
          doc: |
            Estimated guess for which a Gaussian mixture model is evaluted to preprocess a result that
            is subsequenty post-processed with a random_forest_classifier to lower the number of
            dimensions in the chemical space to the subset of trunc_species many elements with the
            highest feature importance.
          unit: NX_UNITLESS
        trunc_species(NX_POSINT):
          doc: |
            The number of elements to use for reducing the dimensionality.
          unit: NX_UNITLESS
        random_forest_classifier(NXprocess):
          exists: optional
          doc: |
            Configuration for the random forest classification model.
      segmentation(NXprocess):
        doc: |
          Step during which the voxel set is segmented into voxel sets with different chemical composition.
        pca(NXprocess):
          exists: optional
          doc: |
            A principal component analysis of the chemical space to guide a decision into how many sets of voxels
            with different chemical composition the machine learning algorithm suggests to split the voxel set.
        ic_opt(NXprocess):
          doc: |
            The decision is guided through the evalution of the information criterion minimization.
          n_max_ic_cluster(NX_POSINT):
            doc: |
              The maximum number of chemical classes to probe with the Gaussian mixture model
              with which the voxel set is segmented into a mixture of voxels with that many different
              chemical compositions.
            unit: NX_UNITLESS
          gaussian_mixture(NXprocess):
            exists: optional
            doc: |
              Configuration for the Gaussian mixture model that is used in the segmentation step.
      clustering(NXprocess):
        doc: |
          Step during which the chemically segmented voxel sets are analyzed for their spatial organization.
        dbscan(NXobject):
          doc: |
            Configuration for the DBScan algorithm that is used in the clustering step.
          eps(NX_FLOAT):
            doc: |
              The maximum distance between voxel pairs in a neighborhood to be considered connected.
            unit: NX_LENGTH
          min_samples(NX_UINT):
            doc: |
              The number of voxels in a neighborhood for a voxel to be considered as a core point.
            unit: NX_UNITLESS

category: application
doc: |
  Application definition for storing results of the SCORE cellular automaton.
  
  The SCORE cellular automaton model for primary recrystallization is an
  example of typical materials engineering applications used within the field
  of so-called Integral Computational Materials Engineering (ICME) whereby
  one can simulate the evolution of microstructures.
  
  Specifically the SCORE model can be used to simulate the growth of static
  recrystallization nuclei. The model is described in the literature:
  
  * `M. KÃ¼hbach et al. <https://doi.org/10.1016/j.actamat.2016.01.068>`_
  * `C. Haase et al. <https://doi.org/10.1016/j.actamat.2015.08.057>`_
  * `M. Diehl et al. <https://doi.org/10.1088/1361-651X/ab51bd>`_
  
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_summary_stats: |
    The total number of summary statistic log entries.
  n_b: |
    Number of boundaries of the bounding box or primitive to domain.
  n_p: |
    Number of parameter required for chosen orientation parameterization.
  n_tex: |
    Number of texture components identified.
  d: |
    Dimensionality.
  c: |
    Cardinality.
  n_front: |
    Number of active cells in the (recrystallization) front.
  n_grains: |
    Number of grains in the computer simulation.

# inspect comments behind NXmicrostructure
type: group
NXmicrostructure_score_results(NXobject):
  (NXentry):
    definition(NX_CHAR):
      enumeration: [NXmicrostructure_score_results]
    simulation_identifier(NX_UINT):
      doc: |
        Simulation ID as an alias to refer to this simulation.
    description(NX_CHAR):
      doc: |
        Discouraged free-text field to add further details to the computation.
    start_time(NX_DATE_TIME):
    end_time(NX_DATE_TIME):
      exists: recommended
    (NXuser):
      exists: [min, 0, max, infty]
    program1(NXprogram):
      program_name:
        \@version:
        \@url:
          exists: recommended
    environment(NXobject):
      exists: optional
      doc: |
        Programs and libraries representing the computational environment
      programID(NXprogram):
        exists: [min, 1, max, infty]
        program(NX_CHAR):
          \@version(NX_CHAR):
    coordinate_system_set(NXcoordinate_system_set):
      rotation_handedness:
      rotation_convention:
      euler_angle_convention:
      axis_angle_convention:
      sign_convention:
      sample_reference_frame(NXcoordinate_system):
        type:
          enumeration: [cartesian]
        handedness:
          enumeration: [right_handed]
        origin:
          enumeration: [front_bottom_left]
        x_alias:
          enumeration: [rolling_direction]
        x_direction:
          enumeration: [east]
        y_alias:
          enumeration: [transverse_direction]
        y_direction:
          enumeration: [in]
        z_alias:
          enumeration: [normal direction]
        z_direction:
          enumeration: [north]
    discretization(NXmicrostructure):
      exists: [min, 1, max, 1]
      grid(NXcg_grid):
        dimensionality(NX_POSINT):
        cardinality(NX_POSINT):
        origin(NX_NUMBER):
        symmetry:
        cell_dimensions(NX_NUMBER):
        extent(NX_UINT):
        identifier_offset(NX_INT):
      boundary(NXcg_polyhedron_set):
        doc: |
          A tight bounding box or sphere or bounding primitive about the grid.
        # a good example for a general bounding box description for such a grids of triclinic cells
        # https://docs.lammps.org/Howto_triclinic.html NXcg_polyhedron because a parallelepiped
        number_of_boundaries(NX_POSINT):
          unit: NX_UNITLESS
          doc: |
            How many distinct boundaries are distinguished?
            Most grids discretize a cubic or cuboidal region. In this case
            six sides can be distinguished, each making an own boundary.
        boundary_conditions(NX_INT):
          unit: NX_UNITLESS
          doc: |
            The boundary conditions for each boundary:
            
            0 - undefined
            1 - open
            2 - periodic
            3 - mirror
            4 - von Neumann
            5 - Dirichlet
          dim: (6,)
        boundaries:
          doc: |
            Name of the boundaries. Left, right, front, back, bottom, top,
            The field must have as many entries as there are number_of_boundaries.
          dim: (6,)
    spatiotemporalID(NXobject):
      exists: [min, 1, max, infty]  # max 1 in case of classical CA simulation, i.e. without solitary units
      doc: |
        Documentation of the spatiotemporal evolution
      # static quantities for which no change is modelled
      # the typical lean summary statistics flattened
      summary_statistics(NXobject):
        doc: |
          Summary quantities which are the result of some post-processing of the snapshot data
          (averaging, integrating, interpolating) happening in for practical reasons though in while
          running the simulation. Place used for storing descriptors from continuum mechanics
          and thermodynamics at the scale of the entire ROI.
        kinetics(NXprocess):
          exists: optional
          doc: |
            Evolution of the recrystallized volume fraction over time.
          time(NX_TIME):
            doc: |
              Evolution of the physical time not to be confused with wall-clock time or profiling data.
            unit: NX_TIME
            dim: (n_summary_stats,)
          iteration(NX_INT):
            doc: |
              Iteration or increment counter.
            unit: NX_UNITLESS
          temperature(NX_FLOAT):
            doc: |
              Evolution of the simulated temperature over time.
            unit: NX_TEMPERATURE
            dim: (n_summary_stats,)
          recrystallized_volume_fraction(NX_FLOAT):
            doc: |
              Recrystallized volume fraction.
            unit: NX_DIMENSIONLESS
            dim: (n_summary_stats,)
        stress(NXprocess):
          exists: optional
          type:
            doc: |
              Which type of stress.
            enumeration: [cauchy]
          stress(NX_FLOAT):
            doc: |
              Applied external stress tensor on the ROI.
            unit: NX_ANY
            dim: (n_summary_stats, 3, 3)
        strain(NXprocess):
          exists: optional
          type:
            doc: |
              Which type of strain.
          strain(NX_FLOAT):
            doc: |
              Applied external strain tensor on the ROI.
            unit: NX_ANY
            dim: (n_summary_stats, 3, 3)
        deformation_gradient(NXprocess):
          exists: optional
          type:
            doc: |
              Which type of deformation gradient.
            enumeration: [piola]
          value(NX_FLOAT):
            doc: |
              Applied deformation gradient tensor on the ROI.
            unit: NX_ANY
            dim: (n_summary_stats, 3, 3)
        magnetic_field(NXprocess):
          exists: optional
          strength(NX_FLOAT):
            doc: |
              Applied external magnetic field on the ROI.
            unit: NX_ANY
            dim: (n_summary_stats, 3, 3)
        electrical_field(NXprocess):
          exists: optional
          # specify type of field
          strength(NX_FLOAT):
            doc: |
              Applied external electrical field on the ROI.
            unit: NX_ANY
            dim: (n_summary_stats, 3, 3)
       # the typically storage-costlier snapshot data
      microstructureID(NXmicrostructure):
        exists: [min, 1, max, infty]  # always storing starting configuration
        time(NX_TIME):
        iteration(NX_INT):
        temperature(NX_FLOAT):
          doc: |
            Simulated temperature for this snapshot.
          unit: NX_TEMPERATURE
        x_value(NX_FLOAT):
          doc: |
            Current recrystallized volume fraction (taking fractional infections into account).
          unit: NX_DIMENSIONLESS
        x_target(NX_NUMBER):
          doc: |
            Target value for which a snapshot was requested for the recrystallized volume fraction.
          unit: NX_DIMENSIONLESS
        # optional places to store the grid for instance if it changes
        grid(NXcg_grid):
          exists: recommended
          grain_identifier(NX_UINT):
            exists: recommended
            doc: |
              Grain identifier for each cell.
            unit: NX_UNITLESS
            dim: (n_x, n_y, n_z)
          thread_identifier(NX_UINT):
            exists: optional
            doc: |
              Identifier of the OpenMP thread which processed this part of the grid.
            unit: NX_UNITLESS
            dim: (n_x, n_y, n_z)
        crystal(NXobject):
          representation:
            exists: recommended
          number_of_crystals(NX_UINT):
          number_of_phases(NX_UINT):
          crystal_identifier_offset(NX_INT):
          crystal_identifier(NX_INT):
            dim: (n_grains,)
          phase_identifier_offset(NX_INT):
          phase_identifier(NX_INT):
            dim: (n_grains,)
          volume(NX_NUMBER):
            doc: |
              Volume of each grain accounting also for partially transformed cells.
            unit: NX_VOLUME
            dim: (n_grains,)
          # SCORE specific
          bunge_euler(NX_FLOAT):  # only in the first snapshot
            doc: |
              Bunge-Euler angle triplets for each grain.
            unit: NX_ANGLE
            dim: (n_grains, 3)
          dislocation_density(NX_FLOAT):
            exists: recommended
            doc: |
              Current value for the dislocation density as a measure of the remaining stored energy
              in assumed crystal defects inside each grain.
            unit: NX_ANY  # 1/m^2
            dim: (n_grains,)
          is_deformed(NX_BOOLEAN):
            exists: recommended
            doc: |
              Is the grain deformed.
            dim: (n_grains,)
          is_recrystallized(NX_BOOLEAN):
            exists: recommended
            doc: |
              Is the grain recrystallized.
            dim: (n_grains,)
        recrystallization_front(NXobject):
          exists: recommended
          doc: |
            Details about those cells which in this time step represent the discrete recrystallization front.
          halo_region(NX_UINT):
            exists: optional
            doc: |
              Which cells are currently in a halo region of threads.
            unit: NX_UNITLESS
            dim: (n_front,)
          mobility_weight(NX_FLOAT):
            exists: recommended
            doc: |
              So-called mobility weight which is a scaling factor to
              control the mobility of the grain boundary which is assumed
              to sweep currently this volume.
            unit: NX_UNITLESS
            dim: (n_front,)
          coordinate(NX_NUMBER):
            exists: recommended
            doc: |
              The x, y, z grid coordinates of each cell in the recrystallization front.
            unit: NX_UNITLESS
            dim: (n_front, 3)
          deformed_grain_identifier(NX_UINT):
            exists: recommended
            doc: |
              Grain identifier assigned to each cell in the recrystallization front.
            unit: NX_UNITLESS
            dim: (n_front,)
          recrystallized_grain_identifier(NX_UINT):
            exists: recommended
            doc: |
              Grain identifier assigned to each nucleus which affected that cell in the recrystallization front.
            unit: NX_UNITLESS
            dim: (n_front,)
          thread_identifier(NX_UINT):
            exists: optional
            doc: |
              Identifier of the OpenMP thread processing each cell in the recrystallization front.
            unit: NX_UNITLESS
            dim: (n_front,)
          infection_direction(NX_UINT):
            exists: optional
            doc: |
              Hint about the direction from which the cell was infected.
            unit: NX_UNITLESS
            dim: (n_front,)
    # performance(NXcs_profiling):
    #   exists: optional
    #   current_working_directory:
    #   command_line_call:
    #     exists: optional
    #   start_time(NX_DATE_TIME):
    #     exists: recommended
    #   end_time(NX_DATE_TIME):
    #     exists: recommended
    #   total_elapsed_time(NX_TIME):
    #   number_of_processes(NX_POSINT):
    #   number_of_threads(NX_POSINT):
    #   number_of_gpus(NX_POSINT):

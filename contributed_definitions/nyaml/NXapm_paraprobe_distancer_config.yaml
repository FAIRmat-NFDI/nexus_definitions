category: application
doc: |
  Application definition for a configuration file of the paraprobe-distancer tool.
  
  This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
type: group
NXapm_paraprobe_distancer_config(NXobject):
  (NXentry):
    exists: ['min', '1', 'max', '1']
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_distancer_config]
    point_to_triangle(NXapm_paraprobe_tool_config):
      exists: ['min', '1', 'max', '1']
      identifier_analysis(NX_UINT):
        exists: recommended
      reconstruction(NXnote):
        type(NX_CHAR):
        file_name(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        position(NX_CHAR):
        mass_to_charge(NX_CHAR):
      ranging(NXnote):
        type(NX_CHAR):
        file_name(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        ranging_definitions(NX_CHAR):
      
      # filter that are here tool-specific parameter
      spatial_filter(NXspatial_filter):
        windowing_method(NX_CHAR):
        hexahedron_set(NXcg_hexahedron):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          index_offset(NX_INT):
          hexahedra(NXcg_face_list_data_structure):
            vertices(NX_UINT):
        cylinder_set(NXcg_cylinder):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          index_offset(NX_INT):
          center(NX_NUMBER):
          height(NX_NUMBER):
          radii(NX_NUMBER):
        ellipsoid_set(NXcg_ellipsoid):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          index_offset(NX_INT):
          center(NX_NUMBER):
          half_axes_radii(NX_NUMBER):
          orientation(NX_NUMBER):
        polyhedron_set(NXcg_polyhedron):
          exists: optional
        
        # TODO
        bitmask(NXcs_filter_boolean_mask):
          exists: optional
          number_of_objects(NX_UINT):
          bitdepth(NX_UINT):
          mask(NX_UINT):
          
          # <field name="identifier" type="NX_UINT"/>
      evaporation_id_filter(NXsubsampling_filter):
        exists: optional
        min_incr_max(NX_INT):
      iontype_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      hit_multiplicity_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      
      # config
      method(NX_CHAR):
        doc: |
          Specifies for which point the tool will compute distances.
          
          The value *default* configures that distances are computed for all points.
          The value *skin* configures that distances are computed only for those
          points which are not farther away located to a triangle than
          threshold_distance.
        enumeration: [default, skin]
      threshold_distance(NX_FLOAT):
        exists: optional
        unit: NX_LENGTH
        doc: |
          Maximum distance for which distances are
          computed when *method* is *skin*.
      
      # nm
      number_of_triangle_sets(NX_UINT):
        unit: NX_UNITLESS
        doc: |
          How many triangle sets to consider.
          Multiple triangle sets can be defined which are
          composed into one joint triangle set for the analysis.
      triangle_setID(NXnote):
        nameType: partial
        exists: ['min', '1', 'max', 'unbounded']
        doc: |
          Each triangle_set that is referred to here should be a face_list_data_structure,
          i.e. an array of (n_vertices, 3) of NX_FLOAT for vertex coordinates, an (n_facets, 3)
          array of NX_UINT incident vertices of each facet. Vertex indices are assumed to
          start at zero and must not exceed n_vertices - 1, i.e. the index_offset is 0.
          Facet normal have to be provided as an array of (n_facets, 3) of NX_FLOAT.
        type(NX_CHAR):
        algorithm(NX_CHAR):
        checksum(NX_CHAR):
        file_name(NX_CHAR):
        vertices(NX_CHAR):
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of vertex positions for the triangles in that triangle_set.
        indices(NX_CHAR):
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of vertex indices for the triangles in that triangle_set.
        vertex_normals(NX_CHAR):
          exists: optional
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of vertex normal vectors for the triangles in that triangle_set.
        face_normals(NX_CHAR):
          exists: optional
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of facet normal vectors for the triangles in that triangle_set.
        indices_patch(NX_CHAR):
          exists: optional
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of identifier for the triangles in that triangle_set.
        patch_filter(NXmatch_filter):
          exists: optional
          method(NX_CHAR):
          match(NX_NUMBER):
    
    # point_set_to_polyline_set(NXapm_paraprobe_tool_config):
    common(NXapm_paraprobe_tool_common):
      status(NX_CHAR):
      (NXprogram):
        exists: ['min', '1', 'max', 'unbounded']
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):

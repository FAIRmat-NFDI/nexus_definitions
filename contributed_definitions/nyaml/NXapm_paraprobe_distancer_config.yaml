category: application
doc: |
  Application definition for a configuration file of the paraprobe-distancer tool.
  
  This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
type: group
NXapm_paraprobe_distancer_config(NXobject):
  (NXentry):
    exists: ['min', '1', 'max', '1']
    definition(NX_CHAR):
      \@version(NX_CHAR):
      enumeration: [NXapm_paraprobe_distancer_config]
    point_to_triangle(NXapm_paraprobe_tool_config):
      exists: ['min', '1', 'max', '1']
      (NXidentifier):
        exists: optional
      analysis_identifier(NX_UINT):
        exists: recommended
      reconstruction(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        position(NX_CHAR):
        mass_to_charge(NX_CHAR):
      ranging(NXserialized):
        type(NX_CHAR):
        path(NX_CHAR):
        checksum(NX_CHAR):
        algorithm(NX_CHAR):
        ranging_definitions(NX_CHAR):
      
      # filter that are here tool-specific parameter
      spatial_filter(NXspatial_filter):
        windowing_method(NX_CHAR):
        hexahedron_set(NXcg_hexahedron_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          hexahedra(NXcg_face_list_data_structure):
            vertices(NX_UINT):
        cylinder_set(NXcg_cylinder_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          height(NX_NUMBER):
          radii(NX_NUMBER):
        ellipsoid_set(NXcg_ellipsoid_set):
          exists: optional
          dimensionality(NX_POSINT):
          cardinality(NX_POSINT):
          identifier_offset(NX_INT):
          center(NX_NUMBER):
          half_axes_radii(NX_NUMBER):
          orientation(NX_NUMBER):
        polyhedron_set(NXcg_polyhedron_set):
          exists: optional
        
        # TODO
        bitmask(NXcs_filter_boolean_mask):
          exists: optional
          number_of_objects(NX_UINT):
          bitdepth(NX_UINT):
          mask(NX_UINT):
          
          # leave open if scalar or matrix
          # dim: (i,)
          identifier(NX_UINT):
      evaporation_id_filter(NXsubsampling_filter):
        exists: optional
        min_incr_max(NX_INT):
      iontype_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      hit_multiplicity_filter(NXmatch_filter):
        exists: optional
        method(NX_CHAR):
        match(NX_NUMBER):
      
      # config
      method(NX_CHAR):
        doc: |
          Specifies for which point the tool will compute distances.
          
          The value *default* configures that distances are computed for all points.
          The value *skin* configures that distances are computed only for those
          points which are not farther away located to a triangle than
          threshold_distance.
        enumeration: [default, skin]
      threshold_distance(NX_FLOAT):
        exists: optional
        unit: NX_LENGTH
        doc: |
          Maximum distance for which distances are
          computed when *method* is *skin*.
      
      # nm
      number_of_triangle_sets(NX_UINT):
        unit: NX_UNITLESS
        doc: |
          How many triangle sets to consider.
          Multiple triangle sets can be defined which are
          composed into one joint triangle set for the analysis.
      triangle_setID(NXserialized):
        exists: ['min', '1', 'max', 'unbounded']
        doc: |
          Each triangle_set that is referred to here should be a face_list_data_structure,
          i.e. an array of (n_vertices, 3) of NX_FLOAT for vertex coordinates, an (n_facets, 3)
          array of NX_UINT incident vertices of each facet. Vertex indices are assumed to
          start at zero and must not exceed n_vertices - 1, i.e. the identifier_offset is 0.
          Facet normal have to be provided as an array of (n_facets, 3) of NX_FLOAT.
        type(NX_CHAR):
        algorithm(NX_CHAR):
        checksum(NX_CHAR):
        path(NX_CHAR):
        vertices(NX_CHAR):
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of vertex positions for the triangles in that triangle_set.
        indices(NX_CHAR):
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of vertex indices for the triangles in that triangle_set.
        vertex_normals(NX_CHAR):
          exists: optional
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of vertex normal vectors for the triangles in that triangle_set.
        face_normals(NX_CHAR):
          exists: optional
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of facet normal vectors for the triangles in that triangle_set.
        patch_identifier(NX_CHAR):
          exists: optional
          doc: |
            Absolute path in the (HDF5) file that points to the array
            of identifier for the triangles in that triangle_set.
        patch_filter(NXmatch_filter):
          exists: optional
          method(NX_CHAR):
          match(NX_NUMBER):
    
    # point_set_to_polyline_set(NXapm_paraprobe_tool_config):
    common(NXapm_paraprobe_tool_common):
      status(NX_CHAR):
      programID(NXprogram):
        exists: ['min', '1', 'max', 'unbounded']
        program(NX_CHAR):
          \@version(NX_CHAR):
      profiling(NXcs_profiling):
        exists: recommended
        start_time(NX_DATE_TIME):
        end_time(NX_DATE_TIME):
        total_elapsed_time(NX_FLOAT):
        current_working_directory(NX_CHAR):

# ++++++++++++++++++++++++++++++++++ SHA HASH ++++++++++++++++++++++++++++++++++
# c85cd158ccd3997a074b80e5117d12e082d6ccd032fa8ad688830d283d92a1e9
# <?xml version='1.0' encoding='UTF-8'?>
# <?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
# <!--
# # NeXus - Neutron and X-ray Common Data Format
# #
# # Copyright (C) 2024-2025 NeXus International Advisory Committee (NIAC)
# #
# # This library is free software; you can redistribute it and/or
# # modify it under the terms of the GNU Lesser General Public
# # License as published by the Free Software Foundation; either
# # version 3 of the License, or (at your option) any later version.
# #
# # This library is distributed in the hope that it will be useful,
# # but WITHOUT ANY WARRANTY; without even the implied warranty of
# # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# # Lesser General Public License for more details.
# #
# # You should have received a copy of the GNU Lesser General Public
# # License along with this library; if not, write to the Free Software
# # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# #
# # For further information, see http://www.nexusformat.org
# -->
# <definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="application" type="group" name="NXapm_paraprobe_distancer_config" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
#     <symbols>
#         <doc>
#              The symbols used in the schema to specify e.g. dimensions of arrays.
#         </doc>
#     </symbols>
#     <doc>
#          Application definition for a configuration file of the paraprobe-distancer tool.
#          
#          This tool is part of the paraprobe-toolbox. Inspect :ref:`NXapm_paraprobe_tool_config` for details.
#     </doc>
#     <group type="NXentry" minOccurs="1" maxOccurs="1">
#         <field name="definition" type="NX_CHAR">
#             <attribute name="version" type="NX_CHAR"/>
#             <enumeration>
#                 <item value="NXapm_paraprobe_distancer_config"/>
#             </enumeration>
#         </field>
#         <group name="point_to_triangle" type="NXapm_paraprobe_tool_config" minOccurs="1" maxOccurs="1">
#             <group type="NXidentifier" optional="true"/>
#             <field name="analysis_identifier" type="NX_UINT" recommended="true"/>
#             <group name="reconstruction" type="NXserialized">
#                 <field name="type" type="NX_CHAR"/>
#                 <field name="path" type="NX_CHAR"/>
#                 <field name="checksum" type="NX_CHAR"/>
#                 <field name="algorithm" type="NX_CHAR"/>
#                 <field name="position" type="NX_CHAR"/>
#                 <field name="mass_to_charge" type="NX_CHAR"/>
#             </group>
#             <group name="ranging" type="NXserialized">
#                 <field name="type" type="NX_CHAR"/>
#                 <field name="path" type="NX_CHAR"/>
#                 <field name="checksum" type="NX_CHAR"/>
#                 <field name="algorithm" type="NX_CHAR"/>
#                 <field name="ranging_definitions" type="NX_CHAR"/>
#             </group>
#             <!--filter that are here tool-specific parameter-->
#             <group name="spatial_filter" type="NXspatial_filter">
#                 <field name="windowing_method" type="NX_CHAR"/>
#                 <group name="hexahedron_set" type="NXcg_hexahedron_set" optional="true">
#                     <field name="dimensionality" type="NX_POSINT"/>
#                     <field name="cardinality" type="NX_POSINT"/>
#                     <field name="identifier_offset" type="NX_INT"/>
#                     <group name="hexahedra" type="NXcg_face_list_data_structure">
#                         <field name="vertices" type="NX_UINT"/>
#                     </group>
#                 </group>
#                 <group name="cylinder_set" type="NXcg_cylinder_set" optional="true">
#                     <field name="dimensionality" type="NX_POSINT"/>
#                     <field name="cardinality" type="NX_POSINT"/>
#                     <field name="identifier_offset" type="NX_INT"/>
#                     <field name="center" type="NX_NUMBER"/>
#                     <field name="height" type="NX_NUMBER"/>
#                     <field name="radii" type="NX_NUMBER"/>
#                 </group>
#                 <group name="ellipsoid_set" type="NXcg_ellipsoid_set" optional="true">
#                     <field name="dimensionality" type="NX_POSINT"/>
#                     <field name="cardinality" type="NX_POSINT"/>
#                     <field name="identifier_offset" type="NX_INT"/>
#                     <field name="center" type="NX_NUMBER"/>
#                     <field name="half_axes_radii" type="NX_NUMBER"/>
#                     <field name="orientation" type="NX_NUMBER"/>
#                 </group>
#                 <group name="polyhedron_set" type="NXcg_polyhedron_set" optional="true"/>
#                 <!--TODO-->
#                 <group name="bitmask" type="NXcs_filter_boolean_mask" optional="true">
#                     <field name="number_of_objects" type="NX_UINT"/>
#                     <field name="bitdepth" type="NX_UINT"/>
#                     <field name="mask" type="NX_UINT"/>
#                     <!--leave open if scalar or matrix
#   dim: (i,)-->
#                     <field name="identifier" type="NX_UINT"/>
#                 </group>
#             </group>
#             <group name="evaporation_id_filter" type="NXsubsampling_filter" optional="true">
#                 <field name="min_incr_max" type="NX_INT"/>
#             </group>
#             <group name="iontype_filter" type="NXmatch_filter" optional="true">
#                 <field name="method" type="NX_CHAR"/>
#                 <field name="match" type="NX_NUMBER"/>
#             </group>
#             <group name="hit_multiplicity_filter" type="NXmatch_filter" optional="true">
#                 <field name="method" type="NX_CHAR"/>
#                 <field name="match" type="NX_NUMBER"/>
#             </group>
#             <!--config-->
#             <field name="method" type="NX_CHAR">
#                 <doc>
#                      Specifies for which point the tool will compute distances.
#                      
#                      The value *default* configures that distances are computed for all points.
#                      The value *skin* configures that distances are computed only for those
#                      points which are not farther away located to a triangle than
#                      threshold_distance.
#                 </doc>
#                 <enumeration>
#                     <item value="default"/>
#                     <item value="skin"/>
#                 </enumeration>
#             </field>
#             <field name="threshold_distance" type="NX_FLOAT" optional="true" units="NX_LENGTH">
#                 <doc>
#                      Maximum distance for which distances are
#                      computed when *method* is *skin*.
#                 </doc>
#             </field>
#             <!--nm-->
#             <field name="number_of_triangle_sets" type="NX_UINT" units="NX_UNITLESS">
#                 <doc>
#                      How many triangle sets to consider.
#                      Multiple triangle sets can be defined which are
#                      composed into one joint triangle set for the analysis.
#                 </doc>
#             </field>
#             <group name="triangle_setID" type="NXserialized" minOccurs="1" maxOccurs="unbounded">
#                 <doc>
#                      Each triangle_set that is referred to here should be a face_list_data_structure,
#                      i.e. an array of (n_vertices, 3) of NX_FLOAT for vertex coordinates, an (n_facets, 3)
#                      array of NX_UINT incident vertices of each facet. Vertex indices are assumed to
#                      start at zero and must not exceed n_vertices - 1, i.e. the identifier_offset is 0.
#                      Facet normal have to be provided as an array of (n_facets, 3) of NX_FLOAT.
#                 </doc>
#                 <field name="type" type="NX_CHAR"/>
#                 <field name="algorithm" type="NX_CHAR"/>
#                 <field name="checksum" type="NX_CHAR"/>
#                 <field name="path" type="NX_CHAR"/>
#                 <field name="vertices" type="NX_CHAR">
#                     <doc>
#                          Absolute path in the (HDF5) file that points to the array
#                          of vertex positions for the triangles in that triangle_set.
#                     </doc>
#                 </field>
#                 <field name="indices" type="NX_CHAR">
#                     <doc>
#                          Absolute path in the (HDF5) file that points to the array
#                          of vertex indices for the triangles in that triangle_set.
#                     </doc>
#                 </field>
#                 <field name="vertex_normals" type="NX_CHAR" optional="true">
#                     <doc>
#                          Absolute path in the (HDF5) file that points to the array
#                          of vertex normal vectors for the triangles in that triangle_set.
#                     </doc>
#                 </field>
#                 <field name="face_normals" type="NX_CHAR" optional="true">
#                     <doc>
#                          Absolute path in the (HDF5) file that points to the array
#                          of facet normal vectors for the triangles in that triangle_set.
#                     </doc>
#                 </field>
#                 <field name="patch_identifier" type="NX_CHAR" optional="true">
#                     <doc>
#                          Absolute path in the (HDF5) file that points to the array
#                          of identifier for the triangles in that triangle_set.
#                     </doc>
#                 </field>
#                 <group name="patch_filter" type="NXmatch_filter" optional="true">
#                     <field name="method" type="NX_CHAR"/>
#                     <field name="match" type="NX_NUMBER"/>
#                 </group>
#             </group>
#         </group>
#         <!--point_set_to_polyline_set(NXapm_paraprobe_tool_config):-->
#         <group name="common" type="NXapm_paraprobe_tool_common">
#             <field name="status" type="NX_CHAR"/>
#             <group name="programID" type="NXprogram" minOccurs="1" maxOccurs="unbounded">
#                 <field name="program" type="NX_CHAR">
#                     <attribute name="version" type="NX_CHAR"/>
#                 </field>
#             </group>
#             <group name="profiling" type="NXcs_profiling" recommended="true">
#                 <field name="start_time" type="NX_DATE_TIME"/>
#                 <field name="end_time" type="NX_DATE_TIME"/>
#                 <field name="total_elapsed_time" type="NX_FLOAT"/>
#                 <field name="current_working_directory" type="NX_CHAR"/>
#             </group>
#         </group>
#     </group>
# </definition>

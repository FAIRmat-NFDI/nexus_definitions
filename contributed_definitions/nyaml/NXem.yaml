category: application
doc: |
  Application definition for normalized representation of electron microscopy research.
  
  This application definition is a comprehensive example for a general description
  with which to normalize specific (meta)data collected from the research field
  of electron microscopy
  
  NXem is designed to be used for documenting experiments or computer simulations in which
  controlled electron beams are used for studying electron-beam matter interaction to explore
  physical mechanisms and phenomena or to characterize materials with an electron microscope.
type: group
NXem(NXobject):
  
  # docstrings should be organize as such a list of blocks:
  # -| req: first part, concept definition, human-readable but such that one could take as is to define an concept in OWL
  # -| opt: second part, comment, i.e. information that in an ideal world would be ideal if represented strongly semantic
  # but for practical purposes currently is interpretable only by human to provide them further contextualization
  # -| recommended: xref part ideally also as a list of triple (spec, term, url to uri)
  (NXentry):
    exists: ['min', '1', 'max', 'unbounded']
    definition(NX_CHAR):
      enumeration: [NXem]
    profiling(NXcs_profiling):
      exists: optional
      doc: |
        The configuration of the software that was used to generate this NeXus file.
      (NXprogram):
        exists: ['min', '0', 'max', 'unbounded']
        doc: |
          A collection of all programs and libraries that are considered as relevant
          to understand with which software tools this NeXus file instance was
          generated. Ideally, to enable a binary recreation from the input data.
          
          Examples include the name and version of the libraries used to write the
          instance. Ideally, the software which writes these NXprogram instances
          also includes the version of the set of NeXus classes i.e. the specific set
          of base classes, application definitions, and contributed definitions
          with which the here described concepts can be resolved.
          
          For the `pynxtools library <https://github.com/FAIRmat-NFDI/pynxtools>`_
          which is used by the `NOMAD <https://nomad-lab.eu/nomad-lab>`_
          research data management system, it makes sense to store e.g. the GitHub
          repository commit and respective submodule references used.
          
          Instances can also be used to document the modules and libraries that
          are offered by the computational environment such as those parsed
          from conda or python virtualenv environments.
        program(NX_CHAR):
          \@version(NX_CHAR):


    identifier_experiment(NX_CHAR):
      exists: optional
    experiment_alias(NX_CHAR):
      exists: optional
      doc: |
        Alias (short name) which scientists can use to refer to this experiment.
    experiment_description(NX_CHAR):
      exists: optional
      doc: |
        Free-text description about the experiment.
        
        Users are strongly advised to parameterize the description of their experiment
        by using respective groups and fields and base classes instead of writing prose
        into the field. The reason is that such free-text field is difficult to machine-interpret.
        The motivation behind keeping this field for now is to learn in how far the
        current base classes need extension based on user feedback.
    start_time(NX_DATE_TIME):
      doc: |
        ISO 8601 time code with local time zone offset to UTC information included
        when the microscope session started. If the application demands that time
        codes in this section of the application definition should only be used
        for specifying when the experiment was performed - and the exact
        duration is not relevant - use this start_time field.
        
        Often though it is useful to specify a time interval via setting both a start_time
        and an end_time because this enables software tools and users to collect a
        more detailed bookkeeping of the experiment.
        
        Users should be aware though that even using only start_time and end_time
        may not be sufficient to infer how long the experiment took or for how long
        data were acquired. To bookkeep more fine-grained timestamps over the
        course of the experiment is possible with start_time and end_time fields
        of respective :ref:`NXevent_data_em` instances.
    end_time(NX_DATE_TIME):
      exists: recommended
      doc: |
        ISO 8601 time code with local time zone offset to UTC included when
        the microscope session ended.
        
        See docstring of the start_time field to see how to use the
        start_time and end_time together.
    (NXcite):
      exists: ['min', '0', 'max', 'unbounded']
    (NXnote):
      exists: ['min', '0', 'max', 'unbounded']
      doc: |
        Collection of serialized resources associated with the experiment.
        
        An example how to use this set is to document from which files in formatting
        of technology partners, the (meta)data in an instance of NXem were filled with
        during parsing to NeXus.
      type(NX_CHAR):
      file_name(NX_CHAR):
      checksum(NX_CHAR):
      algorithm(NX_CHAR):
    (NXuser):
      exists: ['min', '0', 'max', 'unbounded']
      doc: |
        Information about persons who performed or were involved in the microscope
        session or simulation run.
        
        Examples could be to put here the principle investigator who performed this
        experiment or students who performed simulations to name but a few.
        Adding multiple users if relevant is recommended.
        
        The protection of personal data by laws is in different stages of development
        and strictness. Therefore, the existence of user data has not been made
        required.
        
        Instances should use user as a name prefix.
      identifierNAME(NX_CHAR):
        nameType: partial
        exists: recommended
        \@type(NX_CHAR):
      name(NX_CHAR):
        exists: optional
        doc: |
          Given (first) name and surname.
      affiliation(NX_CHAR):
        exists: optional
        doc: |
          Name of the affiliation at the point in time when the experiment was performed.
      address(NX_CHAR):
        exists: optional
        doc: |
          Postal address of the affiliation.
      email(NX_CHAR):
        exists: optional
        doc: |
          Email address at the point in time when the experiment was performed.
          
          Writing the most permanently used email is recommended.
      telephone_number(NX_CHAR):
        exists: optional
        doc: |
          Telephone number at the point in time when the experiment was performed.
      role(NX_CHAR):
        exists: optional
        doc: |
          User role at the point in time when the experiment was performed.
          
          Examples are technician operating the microscope, student, postdoc,
          principle investigator, or guest.
    SAMPLE(NXsample):
      exists: ['min', '1', 'max', 'unbounded']
      nameType: any
      doc:
      - |
        A physical entity which contains material intended to be investigated.
        Sample and specimen are treated as de facto synonyms.
        Samples can be real or virtual ones as annotated via is_simulation.
      - |
        The suggested best practice is to call this group sample. In those cases when
        multiple samples need to be grouped inside one entry, these SAMPLE groups
        should be named using the prefix sample followed an index starting from 1, i.e.
        (sample1, sample2).
      - |
        There are at least two strategies how to store (meta)data when one analyzes multiple
        samples - not different ROIs on a single sample though - in one session.
      - |
        One strategy is to store each sample and its results under an own NXem/ENTRY.
        This is one of the most frequent use cases as during most sessions typically only a
        single sample is investigated. In this case the name of this group should be NXem/ENTRY/sample.
      - |
        If multiple samples are investigated storing each of them in an own ENTRY group eventually will
        demand an unnecessary duplication though of many details about the instrument.
      - |
        This can be avoided by using another strategy how to store all samples and their results.
        Namely, by using only one instance of NXem/ENTRY. That NXem/ENTRY should then be named,
        like in the previous case, NXem/entry1 and the samples should be named sample1, sample2, etc.,
        i.e. instances should use sample as a name prefix.
      - |
        In this case though the collection of events demands to use identifier_sample to state clearly
        for which of the samples loaded the (characterization) event was detected.
      - |
        xref:
          spec: EMglossary
          term: Specimen
          url: https://purls.helmholtz-metadaten.de/emg/EMG_00000046
      is_simulation(NX_BOOLEAN):
        doc: |
          Qualifier whether the sample is a real (in which case is_simulation should be set to false)
          or a virtual one (in which case is_simulation should be set to true).
      physical_form:
        exists: recommended
        enumeration:
          open_enum: true
          items: [bulk, foil, thin_film, powder]
      identifier_sample(NX_CHAR):
        exists: recommended
        doc: |
          Ideally, (globally) unique persistent identifier which distinguishes this sample from all others
          and especially the predecessor/origin from where that sample was cut.  The terms sample
          and specimen are here considered as exact synonyms.
          
          This field must not be used for an alias for the sample! Instead, use name.
          
          In cases where multiple specimens were loaded into the microscope, the identifier has to resolve
          the specific sample, whose results are stored by this :ref:`NXentry` instance because a single
          NXentry should be used for the characterization of a single specimen.
          
          Details about the specimen preparation should be stored in resources referring to identifier_parent.
        \@type(NX_CHAR):
      identifier_parent(NX_CHAR):
        exists: recommended
        doc: |
          Identifier of the sample from which the sample was cut or the string *None*,
          i.e. the parent to this sample.
          
          The purpose of this field is to support functionalities for tracking
          sample provenance in a research data management system.
        \@type(NX_CHAR):
      preparation_date(NX_DATE_TIME):
        doc: |
          ISO 8601 time code with local time zone offset to UTC information
          when the specimen was prepared.
          
          Ideally, report the end of the preparation, i.e. the last known timestamp when
          the measured specimen surface was actively prepared. Ideally, this matches
          the last timestamp that is mentioned in the digital resource pointed to by
          identifier_parent.
          
          Knowing when the specimen was exposed to e.g. specific atmosphere is especially
          required for material that is sensitive to the environment such as specimens that were
          charged with fast diffusing elements or short-lived radioactive tracers.
          
          Additional time stamps prior to preparation_date should better be placed in resources
          which describe but do not pollute the description here with prose. Resolving these
          connected metadata is considered as within the responsibility of the
          research data management system and not the a NeXus file.
      name(NX_CHAR):
        exists: recommended
        doc: |
          An alias used to refer to the specimen to please readability for humans.
      atom_types(NX_CHAR):
        doc: |
          List of comma-separated elements from the periodic table that are contained in the sample.
          If the sample substance has multiple components, all elements from each component
          must be included in atom_types.
          
          The purpose of the field is to offer research data management systems an opportunity
          to parse the relevant elements without having to interpret these from the resources
          pointed to by identifier_parent or walk through eventually deeply nested groups in
          individual data instances.
      thickness(NX_NUMBER):
        exists: optional
        unit: NX_LENGTH
        doc: |
          (Measured) sample thickness.
          
          The information is recorded to qualify if the beam used was likely
          able to shine through the specimen. For scanning electron microscopy,
          in many cases the specimen is typically thicker than what is
          illuminatable by the electron beam.
          
          In this case the value should be set to the actual thickness of the specimen
          viewed for an illumination situation where the nominal surface normal of the
          specimen is parallel to the optical axis.
      density(NX_NUMBER):
        exists: optional
        unit: NX_ANY
        doc: |
          (Measured) density of the specimen.
          
          For multi-layered specimens this field should only be used to describe
          the density of the excited volume. For scanning electron microscopy
          the usage of this field is discouraged and instead an instance of a region-of-interest within connection to individual :ref:`NXevent_data_em`
          instances can provide a cleaner description of the relevant details
          why one may wish to store the density of the specimen.
      description(NX_CHAR):
        exists: optional
        doc: |
          Discouraged free-text field to provide further detail.
    consistent_rotations(NXparameters):
      exists: recommended
      doc: |
        The conventions used when reporting crystal orientations.
        We follow the best practices of the Material Science community
        that are defined in reference `<https://doi.org/10.1088/0965-0393/23/8/083501>`_.
      rotation_handedness(NX_CHAR):
        doc: |
          Convention how a positive rotation angle is defined when viewing
          from the end of the rotation unit vector towards its origin.
          This is in accordance with convention 2 of reference `<https://doi.org/10.1088/0965-0393/23/8/083501>`_.
          
          Counter_clockwise is equivalent to a right-handed choice.
          Clockwise is equivalent to a left-handed choice.
        enumeration: [counter_clockwise, clockwise]
      rotation_convention(NX_CHAR):
        doc: |
          How are rotations interpreted into an orientation according to convention 3
          of reference `<https://doi.org/10.1088/0965-0393/23/8/083501>`_.
        enumeration: [passive, active]
      euler_angle_convention(NX_CHAR):
        doc: |
          How are Euler angles interpreted given that there are several choices (e.g. zxz, xyz)
          according to convention 4 of reference `<https://doi.org/10.1088/0965-0393/23/8/083501>`_.
          
          The most frequently used convention is zxz, which is based on the work of H.-J. Bunge
          but other conventions are possible. Apart from undefined, proper Euler angles
          are distinguished from (improper) Tait-Bryan angles.
        enumeration: [zxz, xyx, yzy, zyz, xzx, yxy, xyz, yzx, zxy, xzy, zyx, yxz]
      axis_angle_convention(NX_CHAR):
        doc: |
          To which angular range is the rotation angle argument of an
          axis-angle pair parameterization constrained according to
          convention 5 of reference `<https://doi.org/10.1088/0965-0393/23/8/083501>`_.
        enumeration: [rotation_angle_on_interval_zero_to_pi]
      sign_convention(NX_CHAR):
        doc: |
          Which sign convention is followed when converting orientations
          between different parametrizations/representations according
          to convention 6 of reference `<https://doi.org/10.1088/0965-0393/23/8/083501>`_.
        enumeration: [p_plus_one, p_minus_one]
    (NXcoordinate_system):
      exists: ['min', '1', 'max', 'unbounded']
      alias(NX_CHAR):
        exists: optional
      type(NX_CHAR):
      handedness(NX_CHAR):
      origin(NX_CHAR):
    processing_reference_frame(NXcoordinate_system):
      exists: recommended
      alias(NX_CHAR):
        exists: optional
      type(NX_CHAR):
      handedness(NX_CHAR):
      origin(NX_CHAR):
        exists: recommended
        doc: |
          Location of the origin of the processing_reference_frame.
          
          It is assumed that regions-of-interest in this reference frame form a rectangle or cuboid.
          Edges are interpreted by inspecting the direction of their outer unit normals
          (which point either parallel or antiparallel) along respective base vector direction
          of the reference frame.
          
          If any of these assumptions is not met, the user is required to explicitly state this.
        enumeration: [front_top_left, front_top_right, front_bottom_right, front_bottom_left, back_top_left, back_top_right, back_bottom_right, back_bottom_left]
      x_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing x-axis base vector of the
          processing_reference_frame.
        enumeration: [north, east, south, west, in, out]
      y_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing y-axis base vector of the
          processing_reference_frame.
        enumeration: [north, east, south, west, in, out]
      z_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing z-axis base vector of the
          processing_reference_frame.
        enumeration: [north, east, south, west, in, out]
    sample_reference_frame(NXcoordinate_system):
      exists: recommended
      depends_on(NX_CHAR):
        exists: optional
        doc: |
          Reference to the specifically named :ref:`NXsample` instance(s) for
          which these conventions apply (e.g. /entry1/sample1).
      alias(NX_CHAR):
        exists: optional
      type(NX_CHAR):
      handedness(NX_CHAR):
      origin(NX_CHAR):
        exists: recommended
        doc: |
          Location of the origin of the sample_reference_frame.
          
          It is assumed that regions-of-interest in this reference frame form a rectangle or cuboid.
          Edges are interpreted by inspecting the direction of their outer unit normals
          (which point either parallel or antiparallel) along respective base vector direction
          of the reference frame.
          
          If any of these assumptions is not met, the user is required to explicitly state this.
        enumeration: [front_top_left, front_top_right, front_bottom_right, front_bottom_left, back_top_left, back_top_right, back_bottom_right, back_bottom_left]
      x_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing x-axis base vector of the
          sample_reference_frame.
        enumeration: [north, east, south, west, in, out]
      y_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing y-axis base vector of the
          sample_reference_frame.
        enumeration: [north, east, south, west, in, out]
      z_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing z-axis base vector of the
          sample_reference_frame.
        enumeration: [north, east, south, west, in, out]
    detector_reference_frameID(NXcoordinate_system):
      nameType: partial
      exists: ['min', '0', 'max', 'unbounded']
      doc: |
        The reference frame that is defined by a specific detector.
      depends_on(NX_CHAR):
        exists: optional
        doc: |
          Reference to the specifically named :ref:`NXdetector` instance for
          which these conventions apply (e.g. /entry1/instrument/detector1).
          
          Instances should use detector_reference_frame as a name prefix.
      alias(NX_CHAR):
        exists: optional
      type(NX_CHAR):
      handedness(NX_CHAR):
      origin(NX_CHAR):
        exists: recommended
        doc: |
          Location of the origin of the detector_reference_frame.
          
          If the regions-of-interest forms a rectangle or cuboid, it is assumed that edges are interpreted
          by inspecting the direction of their outer unit normals (which point either parallel or antiparallel)
          along respective base vector direction of the reference frame.
          
          If any of these assumptions is not met, the user is required to explicitly state this.
        enumeration: [front_top_left, front_top_right, front_bottom_right, front_bottom_left, back_top_left, back_top_right, back_bottom_right, back_bottom_left]
      x_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing x-axis base vector of the
          detector_reference_frame.
        enumeration: [north, east, south, west, in, out]
      y_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing y-axis base vector of the
          detector_reference_frame.
        enumeration: [north, east, south, west, in, out]
      z_direction(NX_CHAR):
        exists: recommended
        doc: |
          Direction of the positively pointing z-axis base vector of the
          detector_reference_frame.
        enumeration: [north, east, south, west, in, out]
    measurement(NXem_measurement):
      exists: optional
      # the choice if a concept filling content in NXfabrication is recommended or optional
      # was made such that all for all those components which are typically add-ons in a
      # microscope it is more likely that individuals will have bought different third-party tools
      # and therefore, for these typically more optional add-ons NXfabrication is recommended
      # for others commercial microscopes often come with model-specific predefined parts
      # hence using optional is sufficient
      instrument(NXinstrument_em):
        name(NX_CHAR):
          exists: recommended
        location(NX_CHAR):
          exists: recommended
        type(NX_CHAR):
          exists: recommended
        fabrication(NXfabrication):
          vendor(NX_CHAR):
          model(NX_CHAR):
          serial_number(NX_CHAR):
            exists: recommended
        (NXprogram):
          exists: recommended
          doc: |
            Details about the control program used for operating the microscope.
            
            Instances should use control_software as a name prefix.
          program(NX_CHAR):
            \@version(NX_CHAR):
        ebeam_column(NXebeam_column):
          fabrication(NXfabrication):
            exists: optional
            vendor(NX_CHAR):
            model(NX_CHAR):
            serial_number(NX_CHAR):
              exists: recommended
          electron_source(NXsource):
            exists: recommended
            emitter_type(NX_CHAR):
            probe(NX_CHAR):
              exists: optional
            
            # voltage like all other dynamic quantities should better be placed in instances of NXevent_data_em
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXlens_em):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use lens as a name prefix.
            name(NX_CHAR):
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXaperture):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use aperture as a name prefix.
            name(NX_CHAR):
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXmonochromator):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use monochromator as a name prefix.
            type(NX_CHAR):
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          corrector_cs(NXcorrector_cs):
            exists: ['min', '0', 'max', '1']
            fabrication(NXfabrication):
              exists: recommended
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          corrector_ax(NXcomponent):
            exists: ['min', '0', 'max', '1']
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          BIPRISM(NXcomponent):
            nameType: any
            exists: ['min', '0', 'max', '1']
            doc: |
              Instances should use biprism as a name prefix.
            fabrication(NXfabrication):
              exists: recommended
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          PHASEPLATE(NXcomponent):
            nameType: any
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use phaseplate as a name prefix.
            type(NX_CHAR):
            fabrication(NXfabrication):
              exists: recommended
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXsensor):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use sensor as a name prefix.
          (NXactuator):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use actuator as a name prefix.
          (NXbeam):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use beam as a name prefix.
          (NXdeflector):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use deflector as a name prefix.
        ibeam_column(NXibeam_column):
          exists: ['min', '0', 'max', '1']
          
          # there are tri-beam SEMs, but with a laser for which one should add NXsource
          # fabrication groups often were not made recommended or required because in practice
          # often scientific groups buy a commercial microscope for which the type and serial number
          # of the microscope (as in the top-level fabrication of instrument) suffices to recover
          # which components that microscope was built from
          fabrication(NXfabrication):
            exists: optional
            vendor(NX_CHAR):
            model(NX_CHAR):
            serial_number(NX_CHAR):
              exists: recommended
          ion_source(NXsource):
            emitter_type(NX_CHAR):
            probe(NXatom):
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXlens_em):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use lens as a name prefix.
            name(NX_CHAR):
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXaperture):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use aperture as a name prefix.
            name(NX_CHAR):
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          (NXmonochromator):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use monochromator as a name prefix.
            fabrication(NXfabrication):
              exists: optional
              vendor(NX_CHAR):
              model(NX_CHAR):
              serial_number(NX_CHAR):
                exists: recommended
          
          # device for correcting axial astigmatism of ion beam?
          (NXsensor):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use sensor as a name prefix.
          (NXactuator):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use actuator as a name prefix.
          (NXbeam):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use beam as a name prefix.
          (NXdeflector):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use deflector as a name prefix.
        (NXdetector):
          exists: ['min', '0', 'max', 'unbounded']
          doc: |
            Instances should use detector as a name prefix.
          name(NX_CHAR):
          fabrication(NXfabrication):
            exists: recommended
            vendor(NX_CHAR):
            model(NX_CHAR):
            serial_number(NX_CHAR):
              exists: recommended
        scan_controller(NXscanbox_em):
          exists: optional
          fabrication(NXfabrication):
            exists: recommended
            vendor(NX_CHAR):
            model(NX_CHAR):
            serial_number(NX_CHAR):
              exists: recommended
        stage(NXmanipulator):
          exists: ['min', '0', 'max', 'unbounded']
          design(NX_CHAR):
            exists: recommended
          
          # add enumeration values from old NXstage_lab
          fabrication(NXfabrication):
            exists: recommended
            vendor(NX_CHAR):
            model(NX_CHAR):
            serial_number(NX_CHAR):
              exists: recommended
        nanoprobe(NXmanipulator):
          exists: optional
          fabrication(NXfabrication):
            exists: recommended
            vendor(NX_CHAR):
            model(NX_CHAR):
            serial_number(NX_CHAR):
              exists: recommended
        (NXpump):
          exists: ['min', '0', 'max', 'unbounded']
          doc: |
            Instances should use pump as a name prefix.
          design(NX_CHAR):
        (NXsensor):
          exists: ['min', '0', 'max', 'unbounded']
          doc: |
            Instances should use sensor as a name prefix.
        (NXactuator):
          exists: ['min', '0', 'max', 'unbounded']
          doc: |
            Instances should use actuator as a name prefix.
      events(NXevent_em):
        exists: ['min', '0', 'max', '1']
        # an instance must not have an NXevent_data_em_set but if it has one it must not be more than 1 !
        doc: |
          To avoid that static instrument-related metadata need to be stored
          repetitively, the NXem application definitions splits the storage of the
          dynamic (meta)data that typically change for each image and spectrum
          from the static one.
        eventID(NXevent_data_em):
          nameType: partial
          exists: ['min', '0', 'max', 'unbounded']
          start_time(NX_DATE_TIME):
            exists: recommended
          end_time(NX_DATE_TIME):
            exists: recommended
          identifier_sample(NX_CHAR):
            exists: recommended
          # above field is another example for lacking support to define conditional existence constraints
          (NXimage):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use image as a name prefix.
              Each NXimage instance must use only one image or stack instance.
            (NXprocess):
              exists: recommended
              input(NXnote):
                exists: recommended
                type(NX_CHAR):
                file_name(NX_CHAR):
                checksum(NX_CHAR):
                algorithm(NX_CHAR):
                context(NX_CHAR):
              detector_identifier(NX_CHAR):
            image_1d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              real(NX_NUMBER):
                \@long_name(NX_CHAR):
              imag(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              magnitude(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              intensity(NX_COMPLEX):
                exists: optional
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
            image_2d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              real(NX_NUMBER):
                \@long_name(NX_CHAR):
              imag(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              magnitude(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              intensity(NX_COMPLEX):
                exists: optional
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
            image_3d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              real(NX_NUMBER):
                \@long_name(NX_CHAR):
              imag(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              magnitude(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              intensity(NX_COMPLEX):
                exists: optional
                \@long_name(NX_CHAR):
              axis_k(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_1d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              real(NX_NUMBER):
                \@long_name(NX_CHAR):
              imag(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              magnitude(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              intensity(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              indices_group(NX_INT):
                exists: optional
                \@long_name(NX_CHAR):
              indices_image(NX_INT):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_2d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              real(NX_NUMBER):
                \@long_name(NX_CHAR):
              imag(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              magnitude(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              intensity(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              indices_group(NX_INT):
                exists: optional
                \@long_name(NX_CHAR):
              indices_image(NX_INT):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_3d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              real(NX_NUMBER):
                \@long_name(NX_CHAR):
              imag(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              magnitude(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              intensity(NX_NUMBER):
                exists: optional
                \@long_name(NX_CHAR):
              indices_group(NX_INT):
                exists: optional
                \@long_name(NX_CHAR):
              indices_image(NX_INT):
                \@long_name(NX_CHAR):
              axis_k(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
          (NXspectrum):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use spectrum as a name prefix.
              Each NXspectrum instance must use only one spectrum or stack instance.
            (NXprocess):
              exists: recommended
              input(NXnote):
                exists: recommended
                type(NX_CHAR):
                file_name(NX_CHAR):
                checksum(NX_CHAR):
                algorithm(NX_CHAR):
                context(NX_CHAR):
              detector_identifier(NX_CHAR):
            spectrum_0d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            spectrum_1d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            spectrum_2d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            spectrum_3d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_k(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_0d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              indices_spectrum(NX_INT):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_1d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              indices_spectrum(NX_INT):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_2d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              indices_spectrum(NX_INT):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
            stack_3d(NXdata):
              exists: optional
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@long_name(NX_CHAR):
              indices_spectrum(NX_INT):
                \@long_name(NX_CHAR):
              axis_k(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
              axis_energy(NX_NUMBER):
                \@long_name(NX_CHAR):
          instrument(NXinstrument_em):
            exists: recommended
            ebeam_column(NXebeam_column):
              operation_mode(NX_CHAR):
              electron_source(NXsource):
                exists: optional
                voltage(NX_NUMBER):
                extraction_voltage(NX_NUMBER):
                  exists: optional
                emission_current(NX_NUMBER):
                  exists: optional
                filament_current(NX_NUMBER):
                  exists: optional
              (NXlens_em):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use lens as a name prefix.
                power_setting(NX_CHAR_OR_NUMBER):
              (NXaperture):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use aperture as a name prefix.
                setting(NX_CHAR_OR_NUMBER):
                  exists: recommended
                  doc: |
                    Descriptor for the aperture setting when the exact technical details
                    are unknown or not directly controllable as the control software of
                    the microscope does not enable or was not configured to display these
                    values for users.
              
              # size can be used as a fallback
              (NXmonochromator):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use monochromator as a name prefix.
                applied(NX_BOOLEAN):
                dispersion(NX_NUMBER):
                  exists: recommended
                voltage(NX_NUMBER):
                  exists: recommended
              corrector_cs(NXcorrector_cs):
                exists: ['min', '0', 'max', '1']
                applied(NX_BOOLEAN):
                  exists: recommended
                TABLEAU(NXprocess):
                  nameType: any
                  exists: ['min', '1', 'max', 'unbounded']
                  
                  # model(NX_CHAR):
                  
                  # ceos
                  doc: |
                    Instances should use tableau as a name prefix.
                  c_1(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  a_1(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  b_2(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  a_2(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_3(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  s_3(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  a_3(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  b_4(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  d_4(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  a_4(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  s_5(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  r_5(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  a_6(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  
                  # nion
                  c_1_0(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_1_2_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_1_2_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_2_1_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_2_1_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_2_3_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_2_3_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_3_0(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_3_2_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_3_2_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_3_4_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_3_4_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_4_1_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_4_1_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_4_3_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_4_3_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_4_5_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_4_5_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_0(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_2_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_2_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_4_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_4_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_6_a(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
                  c_5_6_b(NXaberration):
                    exists: optional
                    magnitude(NX_NUMBER):
              
              # we could write down how to store the aberrations but we should not force to add aberrations
              # basically optional use of NXaberration therein at least some value required
              corrector_ax(NXcomponent):
                exists: ['min', '0', 'max', '1']
                applied(NX_BOOLEAN):
                value_x(NX_NUMBER):
                value_y(NX_NUMBER):
              
              # biprism(NXcomponent):
              
              # phaseplateID(NXcomponent):
              (NXsensor):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use sensor as a name prefix.
              (NXactuator):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use actuator as a name prefix.
              (NXbeam):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use beam as a name prefix.
              (NXdeflector):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use deflector as a name prefix.
            ibeam_column(NXibeam_column):
              exists: ['min', '0', 'max', '1']
              ion_source(NXsource):
                probe(NXatom):
                voltage(NX_NUMBER):
                flux(NX_NUMBER):
              (NXlens_em):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use lens as a name prefix.
                power_setting(NX_CHAR_OR_NUMBER):
              (NXaperture):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use aperture as a name prefix.
                setting(NX_CHAR_OR_NUMBER):
                  doc: |
                    Descriptor for the aperture setting when the exact technical details
                    are unknown or not directly controllable as the control software of
                    the microscope does not enable or was not configured to display these
                    values for users.
              (NXmonochromator):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use monochromator as a name prefix.
                applied(NX_BOOLEAN):
              (NXsensor):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use sensor as a name prefix.
              (NXactuator):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use actuator as a name prefix.
              (NXbeam):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use beam as a name prefix.
              (NXdeflector):
                exists: ['min', '0', 'max', 'unbounded']
                doc: |
                  Instances should use deflector as a name prefix.
            (NXdetector):
              exists: ['min', '0', 'max', 'unbounded']
              doc: |
                Instances should use detector as a name prefix.
              mode(NX_CHAR):
                doc: |
                  Operation mode of the detector as displayed by the control software.
            scan_controller(NXscanbox_em):
              exists: optional
              scan_schema(NX_CHAR):
              dwell_time(NX_NUMBER):
            (NXsensor):
              exists: ['min', '0', 'max', 'unbounded']
              doc: |
                Instances should use sensor as a name prefix.
            (NXactuator):
              exists: ['min', '0', 'max', 'unbounded']
              doc: |
                Instances should use actuator as a name prefix.
            stage(NXmanipulator):
              exists: ['min', '0', 'max', 'unbounded']
              design(NX_CHAR):
                exists: recommended
              tilt1(NX_NUMBER):
              tilt2(NX_NUMBER):
              rotation(NX_NUMBER):
              position(NX_NUMBER):
              sample_heater(NXactuator):
                exists: optional
                physical_quantity(NX_CHAR):
                heater_current(NX_NUMBER):
                  exists: optional
                  unit: NX_CURRENT
                  doc: |
                    Nominal current of the heater.
                heater_voltage(NX_NUMBER):
                  exists: optional
                  unit: NX_VOLTAGE
                  doc: |
                    Nominal voltage of the heater.
                heater_power(NX_NUMBER):
                  unit: NX_POWER
            optics(NXoptical_system_em):
              exists: recommended
    simulation(NXem_simulation):
      exists: optional
      doc: |
        Documentation for a simulation of electron beam-matter interaction.
      programID(NXprogram):
        nameType: partial
        exists: recommended
        doc: |
          The program with which the simulation was performed.
        program(NX_CHAR):
          \@version(NX_CHAR):
      environment(NXcollection):
        exists: recommended
        doc: |
          Programs and libraries representing the computational environment
        (NXprogram):
          exists: ['min', '1', 'max', 'unbounded']
          program(NX_CHAR):
            \@version(NX_CHAR):
      config(NXparameters):
        exists: optional
        doc: |
          Configuration of the simulation
      results(NXprocess):
        exists: optional
        doc: |
          Results of the simulation
        (NXimage):
          exists: ['min', '0', 'max', 'unbounded']
        (NXspectrum):
          exists: ['min', '0', 'max', 'unbounded']
        interaction_volumeID(NXinteraction_volume_em):
          nameType: partial
          exists: ['min', '0', 'max', 'unbounded']
          (NXdata):
            exists: recommended
          (NXprocess):
            exists: recommended
    
    # relevant research result post-processed for specific community methods
    # but normalized in its representation ready to be consumed for
    # research data management systems
    roiID(NXroi):
      nameType: partial
      exists: ['min', '0', 'max', 'unbounded']
      doc:
      - |
        xref:
          spec: EMglossary
          term: Region Of Interest
          url: https://purls.helmholtz-metadaten.de/emg/EMG_00000042
      
      # as soon as one entry is here constrained further
      # an RDM can be sure to find specific pieces of information in a
      # specific way but then every user of this application definition
      # is required to provide such information in this way!
      img(NXem_img):
        exists: optional
        (NXimage):
          exists: ['min', '1', 'max', 'unbounded']
          doc: |
            Instances should use image as a name prefix.
            Each NXimage instance must use only one image or stack instance.
          imaging_mode(NX_CHAR):
          (NXmicrostructure):
            exists: optional
      ebsd(NXem_ebsd):
        exists: optional
        gnomonic_reference_frame(NXcoordinate_system):
          exists: optional
          alias(NX_CHAR):
            exists: optional
          type(NX_CHAR):
          handedness(NX_CHAR):
          origin(NX_CHAR):
          x_direction(NX_CHAR):
          y_direction(NX_CHAR):
          z_direction(NX_CHAR):
        pattern_centre(NXprocess):
          exists: recommended
          x_boundary_convention(NX_CHAR):
          x_normalization_direction(NX_CHAR):
          y_boundary_convention(NX_CHAR):
          y_normalization_direction(NX_CHAR):
        measurement(NXprocess):
          exists: optional
          depends_on(NX_CHAR):
          source(NXnote):
            type(NX_CHAR):
            file_name(NX_CHAR):
            checksum(NX_CHAR):
            algorithm(NX_CHAR):
        simulation(NXprocess):
          exists: optional
          depends_on(NX_CHAR):
          source(NXnote):
            type(NX_CHAR):
            file_name(NX_CHAR):
            checksum(NX_CHAR):
            algorithm(NX_CHAR):
        calibration(NXprocess):
          exists: recommended
        indexing(NXprocess):
          exists: optional
          number_of_scan_points(NX_UINT):
          indexing_rate(NX_NUMBER):
            exists: recommended
          source(NXnote):
            exists: optional
            type(NX_CHAR):
            file_name(NX_CHAR):
            checksum(NX_CHAR):
            algorithm(NX_CHAR):
          
          # per scan point quantities (identifier_phase, matching_phase, positions, etc.)
          # just using the implicit optional, for the database example in NOMAD we do
          # not wish to duplicate all payload data
          (NXphase):
            exists: ['min', '0', 'max', 'unbounded']
            doc: |
              Instances should use phase as a name prefix.
            name(NX_CHAR):
              exists: recommended
            number_of_scan_points(NX_UINT):
            unit_cell(NXunit_cell):
              a_b_c(NX_NUMBER):
              alpha_beta_gamma(NX_NUMBER):
              space_group(NX_CHAR):
            
            # foreseen place for phase-specific texture and microstructure representations and statistics
            IPF(NXmicrostructure_ipf):
              nameType: any
              exists: recommended
              color_model(NX_CHAR):
              projection_direction(NX_NUMBER):
              map(NXdata):
                \@signal(NX_CHAR):
                \@axes(NX_CHAR):
                \@AXISNAME_indices(NX_UINT):
                  nameType: partial
                title(NX_CHAR):
                  exists: recommended
                data(NX_NUMBER):
                  \@long_name(NX_CHAR):
                axis_x(NX_NUMBER):
                  \@long_name(NX_CHAR):
                axis_y(NX_NUMBER):
                  exists: optional
                  \@long_name(NX_CHAR):
                axis_z(NX_NUMBER):
                  exists: optional
                  \@long_name(NX_CHAR):
              legend(NXdata):
                \@signal(NX_CHAR):
                \@axes(NX_CHAR):
                \@AXISNAME_indices(NX_UINT):
                  nameType: partial
                title(NX_CHAR):
                  exists: recommended
                data(NX_NUMBER):
                  \@long_name(NX_CHAR):
                axis_x(NX_NUMBER):
                  \@long_name(NX_CHAR):
                axis_y(NX_NUMBER):
                  \@long_name(NX_CHAR):
            ODF(NXmicrostructure_odf):
              nameType: any
              exists: optional
            PF(NXmicrostructure_pf):
              nameType: any
              exists: optional
            (NXmicrostructure):
              exists: optional
          roi(NXdata):
            exists: recommended
            \@signal(NX_CHAR):
            \@axes(NX_CHAR):
            \@AXISNAME_indices(NX_UINT):
              nameType: partial
            title(NX_CHAR):
              exists: recommended
            descriptor(NX_CHAR):
            data(NX_NUMBER):
            axis_z(NX_NUMBER):
              exists: optional
              \@long_name(NX_CHAR):
            axis_y(NX_NUMBER):
              \@long_name(NX_CHAR):
            axis_x(NX_NUMBER):
              \@long_name(NX_CHAR):
      eds(NXem_eds):
        exists: optional
        
        # remains to be discussed based on examples
        indexing(NXprocess):
          summary(NXdata):
            exists: optional
            \@signal(NX_CHAR):
            \@axes(NX_CHAR):
            \@AXISNAME_indices(NX_UINT):
              nameType: partial
            title(NX_CHAR):
              exists: recommended
            intensity(NX_NUMBER):
            axis_energy(NX_CHAR):
              \@long_name(NX_CHAR):
          atom_types(NX_CHAR):
          (NXimage):
            exists: ['min', '0', 'max', '118']
            iupac_line_candidates(NX_CHAR):
              exists: recommended
            energy_range(NX_NUMBER):
            image_2d(NXdata):
              \@signal(NX_CHAR):
              \@axes(NX_CHAR):
              \@AXISNAME_indices(NX_UINT):
                nameType: partial
              title(NX_CHAR):
                exists: recommended
              intensity(NX_NUMBER):
                \@units(NX_CHAR):
                  exists: recommended
              axis_i(NX_NUMBER):
                \@long_name(NX_CHAR):
                \@units(NX_CHAR):
              axis_j(NX_NUMBER):
                \@long_name(NX_CHAR):
                \@units(NX_CHAR):
      eels(NXem_eels):
        exists: optional
  
  # see an example how to map e.g. the following flat schema https://www.zenodo.org/record/6513745 to NXem
  # in https://github.com/FAIRmat-NFDI/nexus_definitions/commit/0b928c4352bc5636f673b5fb25ce990f1af8a099

category: application
doc: |
  Results of a paraprobe-ranger tool run.
symbols:
  doc: |
    The symbols used in the schema to specify e.g. dimensions of arrays.
  n_ions: |
    The total number of ions in the reconstruction.
  n_ivec_max: |
    Maximum number of allowed atoms per (molecular) ion (fragment).
    Needs to match maximum_number_of_atoms_per_molecular_ion.
type: group
NXapm_paraprobe_results_ranger(NXobject):
  
  # by default for appdefs the value of the exists keyword is required
  # unless it is explicitly specified differently
  (NXentry):
    exists: ['min', '1', 'max', '1']
    \@version:
      doc: |
        Version specifier of this application definition.
    
    ##MK::begin of the tool-specific section
    definition:
      doc: |
        Official NeXus NXDL schema with which this file was written.
      enumeration: [NXapm_paraprobe_results_ranger]
    
    ##MK::end of the tool-specific section
    program:
      doc: |
        Given name of the program/software/tool with which this NeXus
        (configuration) file was generated.
      \@version:
        doc: |
          Ideally program version plus build number, or commit hash or description
          of ever persistent resources where the source code of the program and
          build instructions can be found so that the program can be configured
          ideally in such a manner that the result of this computational process
          is recreatable in the same deterministic manner.
    analysis_identifier:
      doc: |
        Ideally, a (globally persistent) unique identifier for referring
        to this analysis.
    analysis_description:
      exists: optional
      doc: |
        Possibility for leaving a free-text description about this analysis.
    start_time(NX_DATE_TIME):
      doc: |
        ISO 8601 formatted time code with local time zone offset to UTC
        information included when the analysis behind this results file
        was started, i.e. the paraprobe-tool executable started as a process.
    end_time(NX_DATE_TIME):
      doc: |
        ISO 8601 formatted time code with local time zone offset to UTC
        information included when the analysis behind this results file
        were completed and the paraprobe-tool executable exited as a process.
    config_filename:
      doc: |
        The path and name of the config file for this analysis.
      \@version:
        doc: |
          At least SHA256 strong hash of the specific config_file for
          tracking provenance.
    results_path:
      exists: optional
      doc: |
        Path to the directory where the tool should store NeXus/HDF5 results
        of this analysis. If not specified results will be stored in the
        current working directory.
    status:
      doc: |
        A statement whether the paraprobe-tool executable managed to
        process the analysis or failed prematurely.
        
        This status is written to the results file after the end_time
        at which point the executable must not compute any analysis.
        Only when this status message is present and shows `success`, the
        user should consider the results. In all other cases it might be
        that the executable has terminated prematurely or another error
        occurred.
      enumeration: [success, failure]
    (NXuser):
      exists: recommended
      doc: |
        If used, contact information and eventually details
        of at least the person who performed this analysis.
      name:
      affiliation:
        exists: recommended
      address:
        exists: optional
      email:
        exists: recommended
      orcid:
        exists: recommended
      orcid_platform:
        exists: recommended
      telephone_number:
        exists: optional
      role:
        exists: recommended
      social_media_name:
        exists: optional
      social_media_platform:
        exists: optional
    (NXcoordinate_system_set):
      exists: optional
      doc: |
        Details about the coordinate system conventions used.
      (NXtransformations):
        exists: ['min', '1', 'max', 'unbounded']
        doc: |
          The individual coordinate systems which should be used.
          Field names should be prefixed with the following controlled terms
          indicating which individual coordinate system is described:
          
          * paraprobe
          * lab
          * specimen
          * laser
          * leap
          * detector
          * recon
    
    ##MK::begin of the tool-specific section
    (NXprocess):
      exists: ['min', '0', 'max', '1']
      apply_existent_ranging(NXprocess):
        exists: ['min', '0', 'max', '1']
        doc: |
          Paraprobe-ranger loads the iontypes and evaluates for each
          ion on which iontype it matches. If it matches on none, the
          ion is considered of the default unknown type with a 0 as its
          respective value in the iontypes array.
        
        ##MK::number_of_ion_types(NX_POSINT):
        maximum_number_of_atoms_per_molecular_ion(NX_POSINT):
          unit: NX_UNITLESS
          doc: |
            The length of the isotope_vector used to describe molecular ions.
        ION(NXion):
          exists: ['min', '1', 'max', '256']
          isotope_vector(NX_UINT):
          nuclid_list(NX_UINT):
            exists: recommended
          charge_state(NX_INT):
          mass_to_charge_range(NX_FLOAT):
        iontypes(NX_UINT):
          unit: NX_UNITLESS
          doc: |
            The iontype ID for each ion that was best matching, stored in the
            order of the evaporation sequence ID. The here computed iontypes
            do not take into account the charge state of the ion which is
            equivalent to interpreting a RNG and RRNG range files for each
            ion in such a way that only the elements of which a (molecular) ion
            is build are considered. By contrast, charged_iontypes takes
            into account also the charge state.
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
        window(NXcs_filter_boolean_mask):
          doc: |
            A bitmask which identifies exactly all those ions ranged irrespective
            the type they ended up with.
          number_of_ions(NX_UINT):
            unit: NX_UNITLESS
            doc: |
              Number of ions covered by the mask.
              The mask value for most may be 0.
          
          # which does paraprobe use
          bitdepth(NX_UINT):
            unit: NX_UNITLESS
            doc: |
              Number of bits assumed matching on a default datatype.
              (e.g. 8 bits for a C-style uint8).
          mask(NX_UINT):
            unit: NX_UNITLESS
            doc: |
              The unsigned integer array representing the content of the mask.
              If padding is used the padded bits are set to 0. The mask is for
              convenience always as large as the entire dataset as it will
              be stored compressed anyway. The convenience feature with this
              is that then the mask can be decoded with numpy and mirrored
              against the evaporation_id array and one immediately can filter
              out all points that were used by the paraprobe.
              The length of the array adds to the next unsigned integer
              if the number of ions in the dataset is not an integer
              multiple of the bitdepth.
            dimensions:
              rank: 1
              dim: [[1, n_ions]]
      molecular_ion_search(NXprocess):
        exists: ['min', '0', 'max', '1']
        doc: |
          Paraprobe-ranger performs a combinatorial search over
          all possible or a reduced set of nuclids to identify
          into which ions these can be composed.
        isotope_vector_matrix(NX_UINT):
          unit: NX_UNITLESS
          doc: |
            The main result is the list of molecular ions, here formatted
            according to the definitions of a set of isotope_vectors
            as detailed in :ref:`NXion`.
          dimensions:
            rank: 2
            dim: [[1, i], [2, 32]]
        mass_to_charge_state_ratio(NX_FLOAT):
          unit: NX_ANY
          doc: |
            The mass-to-charge-state ratio of each molecular ion
            without considering relativistic or quantum effects.
          dimensions:
            rank: 1
            dim: [[1, i]]
        mass(NX_FLOAT):
          exists: optional
          unit: NX_ANY
          doc: |
            The mass of each molecular ion without
            considering relativistic or quantum effects.
          
          # \@units: amu
          dimensions:
            rank: 1
            dim: [[1, i]]
        charge_state(NX_UINT):
          unit: NX_CHARGE
          doc: |
            The charge_state of each molecular ion.
          dimensions:
            rank: 1
            dim: [[1, i]]
        natural_abundance_product(NX_FLOAT):
          exists: optional
          unit: NX_DIMENSIONLESS
          doc: |
            The product of the natural abundance of the isotopes building
            each molecular ion. Further details are available in
            :ref:`NXapm_paraprobe_config_ranger`.
          dimensions:
            rank: 1
            dim: [[1, i]]
        composition_product(NX_FLOAT):
          exists: optional
          unit: NX_DIMENSIONLESS
          doc: |
            The product of the natural abundance of the isotopes building
            each molecular ion. Further details are available in
            :ref:`NXapm_paraprobe_config_ranger`.
          dimensions:
            rank: 1
            dim: [[1, i]]
        number_of_disjoint_nuclids(NX_POSINT):
          exists: optional
          unit: NX_UNITLESS
          doc: |
            The number of disjoint nuclids for each molecular ion.
          dimensions:
            rank: 1
            dim: [[1, i]]
        number_of_nuclids(NX_POSINT):
          exists: optional
          unit: NX_UNITLESS
          doc: |
            The number of nuclids for each molecular ion.
          dimensions:
            rank: 1
            dim: [[1, i]]
      check_existent_ranging(NXprocess):
        exists: ['min', '0', 'max', '1']
        doc: |
          Paraprobe-ranger loads iontypes and evaluates for each ion on which
          iontype it matches. If it matches on none, the ion is considered of
          the default unknown type with a 0 as its respective value in the
          iontypes array. In contrast to use_existent_ranging this process
          does neither needs measured ion position nor mass-to-charge-state
          ratio values.
        
        ##MK::number_of_ion_types(NX_POSINT):
        maximum_number_of_atoms_per_molecular_ion(NX_POSINT):
          unit: NX_UNITLESS
          doc: |
            The length of the isotope_vector used to describe molecular ions.
        charged_ION(NXion):
          exists: ['min', '1', 'max', '256']
          isotope_vector(NX_UINT):
          nuclid_list(NX_UINT):
            exists: recommended
          charge_state(NX_INT):
          mass_to_charge_range(NX_FLOAT):
    
    ##MK::end of the tool-specific section
    performance(NXcs_profiling):
      current_working_directory:
      command_line_call:
        exists: optional
      start_time(NX_DATE_TIME):
        exists: recommended
      end_time(NX_DATE_TIME):
        exists: recommended
      total_elapsed_time(NX_NUMBER):
      number_of_processes(NX_POSINT):
      number_of_threads(NX_POSINT):
      number_of_gpus(NX_POSINT):
      (NXcs_computer):
        exists: recommended
        name:
          exists: recommended
        operating_system:
          \@version:
        uuid:
          exists: optional
        (NXcs_cpu):
          exists: ['min', '0', 'max', 'unbounded']
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_gpu):
          exists: ['min', '0', 'max', 'unbounded']
          name:
            exists: optional
          (NXfabrication):
            exists: recommended
            identifier:
              exists: optional
            capabilities:
              exists: optional
        (NXcs_mm_sys):
          exists: ['min', '0', 'max', '1']
          total_physical_memory(NX_NUMBER):
        (NXcs_io_sys):
          exists: ['min', '0', 'max', '1']
          (NXcs_io_obj):
            exists: ['min', '1', 'max', 'unbounded']
            technology:
            max_physical_capacity(NX_NUMBER):
            name:
              exists: optional
            (NXfabrication):
              exists: recommended
              identifier:
                exists: optional
              capabilities:
                exists: optional
        (NXcs_profiling_event):
          start_time(NX_DATE_TIME):
            exists: optional
          end_time(NX_DATE_TIME):
            exists: optional
          description:
          elapsed_time(NX_NUMBER):
          number_of_processes(NX_POSINT):
            
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_processes
              in the NXcs_profiling super class.
          number_of_threads(NX_POSINT):
            
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          number_of_gpus(NX_POSINT):
            
            # exists: recommended
            doc: |
              Specify if it was different from the number_of_threads
              in the NXcs_profiling super class.
          max_virtual_memory_snapshot(NX_NUMBER):
            exists: recommended
          max_resident_memory_snapshot(NX_NUMBER):
            exists: recommended

# ++++++++++++++++++++++++++++++++++ SHA HASH ++++++++++++++++++++++++++++++++++
# d12fb5165f6decda506bf81f54410afba9e54f22e83c0682ba82fe68d7ddbeee
# <?xml version="1.0" encoding="UTF-8"?>
# <?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
# <!--
# # NeXus - Neutron and X-ray Common Data Format
# # 
# # Copyright (C) 2014-2022 NeXus International Advisory Committee (NIAC)
# # 
# # This library is free software; you can redistribute it and/or
# # modify it under the terms of the GNU Lesser General Public
# # License as published by the Free Software Foundation; either
# # version 3 of the License, or (at your option) any later version.
# #
# # This library is distributed in the hope that it will be useful,
# # but WITHOUT ANY WARRANTY; without even the implied warranty of
# # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# # Lesser General Public License for more details.
# #
# # You should have received a copy of the GNU Lesser General Public
# # License along with this library; if not, write to the Free Software
# # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# #
# # For further information, see http://www.nexusformat.org
# -->
# <definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="application" name="NXapm_paraprobe_results_ranger" extends="NXobject" type="group" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
#     <symbols>
#         <doc>
#              The symbols used in the schema to specify e.g. dimensions of arrays.
#         </doc>
#         <symbol name="n_ions">
#             <doc>
#                  The total number of ions in the reconstruction.
#             </doc>
#         </symbol>
#         <symbol name="n_ivec_max">
#             <doc>
#                  Maximum number of allowed atoms per (molecular) ion (fragment).
#                  Needs to match maximum_number_of_atoms_per_molecular_ion.
#             </doc>
#         </symbol>
#     </symbols>
#     <doc>
#          Results of a paraprobe-ranger tool run.
#     </doc>
#     <!--by default for appdefs the value of the exists keyword is required
# unless it is explicitly specified differently-->
#     <group type="NXentry" minOccurs="1" maxOccurs="1">
#         <attribute name="version">
#             <doc>
#                  Version specifier of this application definition.
#             </doc>
#         </attribute>
#         <!--##MK::begin of the tool-specific section-->
#         <field name="definition">
#             <doc>
#                  Official NeXus NXDL schema with which this file was written.
#             </doc>
#             <enumeration>
#                 <item value="NXapm_paraprobe_results_ranger"/>
#             </enumeration>
#         </field>
#         <!--##MK::end of the tool-specific section-->
#         <field name="program">
#             <doc>
#                  Given name of the program/software/tool with which this NeXus
#                  (configuration) file was generated.
#             </doc>
#             <attribute name="version">
#                 <doc>
#                      Ideally program version plus build number, or commit hash or description
#                      of ever persistent resources where the source code of the program and
#                      build instructions can be found so that the program can be configured
#                      ideally in such a manner that the result of this computational process
#                      is recreatable in the same deterministic manner.
#                 </doc>
#             </attribute>
#         </field>
#         <field name="analysis_identifier">
#             <doc>
#                  Ideally, a (globally persistent) unique identifier for referring
#                  to this analysis.
#             </doc>
#         </field>
#         <field name="analysis_description" optional="true">
#             <doc>
#                  Possibility for leaving a free-text description about this analysis.
#             </doc>
#         </field>
#         <field name="start_time" type="NX_DATE_TIME">
#             <doc>
#                  ISO 8601 formatted time code with local time zone offset to UTC
#                  information included when the analysis behind this results file
#                  was started, i.e. the paraprobe-tool executable started as a process.
#             </doc>
#         </field>
#         <field name="end_time" type="NX_DATE_TIME">
#             <doc>
#                  ISO 8601 formatted time code with local time zone offset to UTC
#                  information included when the analysis behind this results file
#                  were completed and the paraprobe-tool executable exited as a process.
#             </doc>
#         </field>
#         <field name="config_filename">
#             <doc>
#                  The path and name of the config file for this analysis.
#             </doc>
#             <attribute name="version">
#                 <doc>
#                      At least SHA256 strong hash of the specific config_file for
#                      tracking provenance.
#                 </doc>
#             </attribute>
#         </field>
#         <field name="results_path" optional="true">
#             <doc>
#                  Path to the directory where the tool should store NeXus/HDF5 results
#                  of this analysis. If not specified results will be stored in the
#                  current working directory.
#             </doc>
#         </field>
#         <field name="status">
#             <doc>
#                  A statement whether the paraprobe-tool executable managed to
#                  process the analysis or failed prematurely.
#                  
#                  This status is written to the results file after the end_time
#                  at which point the executable must not compute any analysis.
#                  Only when this status message is present and shows `success`, the
#                  user should consider the results. In all other cases it might be
#                  that the executable has terminated prematurely or another error
#                  occurred.
#             </doc>
#             <enumeration>
#                 <item value="success"/>
#                 <item value="failure"/>
#             </enumeration>
#         </field>
#         <group type="NXuser" recommended="true">
#             <doc>
#                  If used, contact information and eventually details
#                  of at least the person who performed this analysis.
#             </doc>
#             <field name="name"/>
#             <field name="affiliation" recommended="true"/>
#             <field name="address" optional="true"/>
#             <field name="email" recommended="true"/>
#             <field name="orcid" recommended="true"/>
#             <field name="orcid_platform" recommended="true"/>
#             <field name="telephone_number" optional="true"/>
#             <field name="role" recommended="true"/>
#             <field name="social_media_name" optional="true"/>
#             <field name="social_media_platform" optional="true"/>
#         </group>
#         <group type="NXcoordinate_system_set" optional="true">
#             <doc>
#                  Details about the coordinate system conventions used.
#             </doc>
#             <group type="NXtransformations" minOccurs="1" maxOccurs="unbounded">
#                 <doc>
#                      The individual coordinate systems which should be used.
#                      Field names should be prefixed with the following controlled terms
#                      indicating which individual coordinate system is described:
#                      
#                      * paraprobe
#                      * lab
#                      * specimen
#                      * laser
#                      * leap
#                      * detector
#                      * recon
#                 </doc>
#             </group>
#         </group>
#         <!--##MK::begin of the tool-specific section-->
#         <group type="NXprocess" minOccurs="0" maxOccurs="1">
#             <group name="apply_existent_ranging" type="NXprocess" minOccurs="0" maxOccurs="1">
#                 <doc>
#                      Paraprobe-ranger loads the iontypes and evaluates for each
#                      ion on which iontype it matches. If it matches on none, the
#                      ion is considered of the default unknown type with a 0 as its
#                      respective value in the iontypes array.
#                 </doc>
#                 <!--##MK::number_of_ion_types(NX_POSINT):-->
#                 <field name="maximum_number_of_atoms_per_molecular_ion" type="NX_POSINT" units="NX_UNITLESS">
#                     <doc>
#                          The length of the isotope_vector used to describe molecular ions.
#                     </doc>
#                 </field>
#                 <group name="ION" type="NXion" minOccurs="1" maxOccurs="256">
#                     <field name="isotope_vector" type="NX_UINT"/>
#                     <field name="nuclid_list" type="NX_UINT" recommended="true"/>
#                     <field name="charge_state" type="NX_INT"/>
#                     <field name="mass_to_charge_range" type="NX_FLOAT"/>
#                 </group>
#                 <field name="iontypes" type="NX_UINT" units="NX_UNITLESS">
#                     <doc>
#                          The iontype ID for each ion that was best matching, stored in the
#                          order of the evaporation sequence ID. The here computed iontypes
#                          do not take into account the charge state of the ion which is
#                          equivalent to interpreting a RNG and RRNG range files for each
#                          ion in such a way that only the elements of which a (molecular) ion
#                          is build are considered. By contrast, charged_iontypes takes
#                          into account also the charge state.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="n_ions"/>
#                     </dimensions>
#                 </field>
#                 <group name="window" type="NXcs_filter_boolean_mask">
#                     <doc>
#                          A bitmask which identifies exactly all those ions ranged irrespective
#                          the type they ended up with.
#                     </doc>
#                     <field name="number_of_ions" type="NX_UINT" units="NX_UNITLESS">
#                         <doc>
#                              Number of ions covered by the mask.
#                              The mask value for most may be 0.
#                         </doc>
#                     </field>
#                     <!--which does paraprobe use-->
#                     <field name="bitdepth" type="NX_UINT" units="NX_UNITLESS">
#                         <doc>
#                              Number of bits assumed matching on a default datatype.
#                              (e.g. 8 bits for a C-style uint8).
#                         </doc>
#                     </field>
#                     <field name="mask" type="NX_UINT" units="NX_UNITLESS">
#                         <doc>
#                              The unsigned integer array representing the content of the mask.
#                              If padding is used the padded bits are set to 0. The mask is for
#                              convenience always as large as the entire dataset as it will
#                              be stored compressed anyway. The convenience feature with this
#                              is that then the mask can be decoded with numpy and mirrored
#                              against the evaporation_id array and one immediately can filter
#                              out all points that were used by the paraprobe.
#                              The length of the array adds to the next unsigned integer
#                              if the number of ions in the dataset is not an integer
#                              multiple of the bitdepth.
#                         </doc>
#                         <dimensions rank="1">
#                             <dim index="1" value="n_ions"/>
#                         </dimensions>
#                     </field>
#                 </group>
#             </group>
#             <group name="molecular_ion_search" type="NXprocess" minOccurs="0" maxOccurs="1">
#                 <doc>
#                      Paraprobe-ranger performs a combinatorial search over
#                      all possible or a reduced set of nuclids to identify
#                      into which ions these can be composed.
#                 </doc>
#                 <field name="isotope_vector_matrix" type="NX_UINT" units="NX_UNITLESS">
#                     <doc>
#                          The main result is the list of molecular ions, here formatted
#                          according to the definitions of a set of isotope_vectors
#                          as detailed in :ref:`NXion`.
#                     </doc>
#                     <dimensions rank="2">
#                         <dim index="1" value="i"/>
#                         <dim index="2" value="32"/>
#                     </dimensions>
#                 </field>
#                 <field name="mass_to_charge_state_ratio" type="NX_FLOAT" units="NX_ANY">
#                     <doc>
#                          The mass-to-charge-state ratio of each molecular ion
#                          without considering relativistic or quantum effects.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#                 <field name="mass" type="NX_FLOAT" optional="true" units="NX_ANY">
#                     <doc>
#                          The mass of each molecular ion without
#                          considering relativistic or quantum effects.
#                     </doc>
#                     <!--\@units: amu-->
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#                 <field name="charge_state" type="NX_UINT" units="NX_CHARGE">
#                     <doc>
#                          The charge_state of each molecular ion.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#                 <field name="natural_abundance_product" type="NX_FLOAT" optional="true" units="NX_DIMENSIONLESS">
#                     <doc>
#                          The product of the natural abundance of the isotopes building
#                          each molecular ion. Further details are available in
#                          :ref:`NXapm_paraprobe_config_ranger`.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#                 <field name="composition_product" type="NX_FLOAT" optional="true" units="NX_DIMENSIONLESS">
#                     <doc>
#                          The product of the natural abundance of the isotopes building
#                          each molecular ion. Further details are available in
#                          :ref:`NXapm_paraprobe_config_ranger`.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#                 <field name="number_of_disjoint_nuclids" type="NX_POSINT" optional="true" units="NX_UNITLESS">
#                     <doc>
#                          The number of disjoint nuclids for each molecular ion.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#                 <field name="number_of_nuclids" type="NX_POSINT" optional="true" units="NX_UNITLESS">
#                     <doc>
#                          The number of nuclids for each molecular ion.
#                     </doc>
#                     <dimensions rank="1">
#                         <dim index="1" value="i"/>
#                     </dimensions>
#                 </field>
#             </group>
#             <group name="check_existent_ranging" type="NXprocess" minOccurs="0" maxOccurs="1">
#                 <doc>
#                      Paraprobe-ranger loads iontypes and evaluates for each ion on which
#                      iontype it matches. If it matches on none, the ion is considered of
#                      the default unknown type with a 0 as its respective value in the
#                      iontypes array. In contrast to use_existent_ranging this process
#                      does neither needs measured ion position nor mass-to-charge-state
#                      ratio values.
#                 </doc>
#                 <!--##MK::number_of_ion_types(NX_POSINT):-->
#                 <field name="maximum_number_of_atoms_per_molecular_ion" type="NX_POSINT" units="NX_UNITLESS">
#                     <doc>
#                          The length of the isotope_vector used to describe molecular ions.
#                     </doc>
#                 </field>
#                 <group name="charged_ION" type="NXion" minOccurs="1" maxOccurs="256">
#                     <field name="isotope_vector" type="NX_UINT"/>
#                     <field name="nuclid_list" type="NX_UINT" recommended="true"/>
#                     <field name="charge_state" type="NX_INT"/>
#                     <field name="mass_to_charge_range" type="NX_FLOAT"/>
#                 </group>
#             </group>
#         </group>
#         <!--##MK::end of the tool-specific section-->
#         <group name="performance" type="NXcs_profiling">
#             <field name="current_working_directory"/>
#             <field name="command_line_call" optional="true"/>
#             <field name="start_time" type="NX_DATE_TIME" recommended="true"/>
#             <field name="end_time" type="NX_DATE_TIME" recommended="true"/>
#             <field name="total_elapsed_time" type="NX_NUMBER"/>
#             <field name="number_of_processes" type="NX_POSINT"/>
#             <field name="number_of_threads" type="NX_POSINT"/>
#             <field name="number_of_gpus" type="NX_POSINT"/>
#             <group type="NXcs_computer" recommended="true">
#                 <field name="name" recommended="true"/>
#                 <field name="operating_system">
#                     <attribute name="version"/>
#                 </field>
#                 <field name="uuid" optional="true"/>
#                 <group type="NXcs_cpu" minOccurs="0" maxOccurs="unbounded">
#                     <field name="name" optional="true"/>
#                     <group type="NXfabrication" recommended="true">
#                         <field name="identifier" optional="true"/>
#                         <field name="capabilities" optional="true"/>
#                     </group>
#                 </group>
#                 <group type="NXcs_gpu" minOccurs="0" maxOccurs="unbounded">
#                     <field name="name" optional="true"/>
#                     <group type="NXfabrication" recommended="true">
#                         <field name="identifier" optional="true"/>
#                         <field name="capabilities" optional="true"/>
#                     </group>
#                 </group>
#                 <group type="NXcs_mm_sys" minOccurs="0" maxOccurs="1">
#                     <field name="total_physical_memory" type="NX_NUMBER"/>
#                 </group>
#                 <group type="NXcs_io_sys" minOccurs="0" maxOccurs="1">
#                     <group type="NXcs_io_obj" minOccurs="1" maxOccurs="unbounded">
#                         <field name="technology"/>
#                         <field name="max_physical_capacity" type="NX_NUMBER"/>
#                         <field name="name" optional="true"/>
#                         <group type="NXfabrication" recommended="true">
#                             <field name="identifier" optional="true"/>
#                             <field name="capabilities" optional="true"/>
#                         </group>
#                     </group>
#                 </group>
#                 <group type="NXcs_profiling_event">
#                     <field name="start_time" type="NX_DATE_TIME" optional="true"/>
#                     <field name="end_time" type="NX_DATE_TIME" optional="true"/>
#                     <field name="description"/>
#                     <field name="elapsed_time" type="NX_NUMBER"/>
#                     <field name="number_of_processes" type="NX_POSINT">
#                         <!--exists: recommended-->
#                         <doc>
#                              Specify if it was different from the number_of_processes
#                              in the NXcs_profiling super class.
#                         </doc>
#                     </field>
#                     <field name="number_of_threads" type="NX_POSINT">
#                         <!--exists: recommended-->
#                         <doc>
#                              Specify if it was different from the number_of_threads
#                              in the NXcs_profiling super class.
#                         </doc>
#                     </field>
#                     <field name="number_of_gpus" type="NX_POSINT">
#                         <!--exists: recommended-->
#                         <doc>
#                              Specify if it was different from the number_of_threads
#                              in the NXcs_profiling super class.
#                         </doc>
#                     </field>
#                     <field name="max_virtual_memory_snapshot" type="NX_NUMBER" recommended="true"/>
#                     <field name="max_resident_memory_snapshot" type="NX_NUMBER" recommended="true"/>
#                 </group>
#             </group>
#         </group>
#     </group>
# </definition>

# position would need another depends_on the specific coordinate system used, currently we assume McStas
# roi1/ebsd/microstructure1
category: base
doc: |
  Base class to describe reconstructed projection of microstructural features.
  
  An example for EBSD.
type: group
NXms_recon(NXobject): 
  # as e.g. a result of one grain reconstruction with MTex or othe
  # grain reconstruction software in commercial tools
  # the idea is we may wish to run as many grain reconstructions as we want...
  # add details about the processing
  configuration(NXobject):
    doc: |
      The configuration and parameterization of the grain reconstruction algorithm.
    # maybe a depends_on what was the input however if the group is injected
    # in an roi1/ebsd instance isnt this information implicit?
    algorithm:
      doc: |
        Which algorithm is used to reconstruct the features.
      enumeration: [unknown, disorientation_clustering, fast_multiscale_clustering, markov_chain_clustering]
    disorientation_threshold(R+):
      doc: |
        Threshold to define at which disorientation to assume two regions have a significant orientation difference.
      unit: NX_ANGLE
  # the result of running such grain reconstruction
  # ms_feature_set1
  (NXms_feature_set):
    # dimensionality(N) composed from NXms_feature_set base:
    # controlled vocabulary of base class instances to be used to inform about the discretization of these features
    # instances to discretize the features
    points(NXobject):
    lines(NXobject):
    surfaces(NXobject):
    volumes(NXobject):
    # domain-specific, i.e. beyond computational geometry based interpretation which
    # specific features are assumed constructed from the above-mentioned geometrical descriptive building blocks
    crystallite_projections(NXms_feature_set):
      # only for 2D
      # the explicit description often generating unnecessary information duplication
      geometry(NXcg_polyhedron_set):
        doc: |
          Set of polyhedra which specify the shape and location of the discretized cross-sectioned crystal.
          
          A single EBSD map is mainly a two-dimensional description of the spatial distribution of
          orientations and phase in a material. Thus, it can be used to describe what is a
          cross-section of crystals. These projections and descriptions derived from such cross-sections
          must not be confused with true volumetric techniques to describe the real shape of such crystal.
          
          See stereology literature for more details e.g.
          E.E. Underwood's book entitled Quantitative Stereology.
      # alternatively for EBSD maps one could also add a list of identifier for points in the mapping
      # which specify which scan points are assumed to belong (fully or partially to the grain), i.e.
      # which scan points discretize the areal description of the shape and location of each crystal
      discretization(N0):
      # alternatively one could one sparse (boolean) mask for each crystal which
      # encodes which scan points belong to each grain 
    interface_projections(NXms_feature_set):
      # only for 2D, use interface_patches in 3D, grain boundaries have a network of line-like defects
      # the explicit description often generating unnecessary information duplication
      geometry(NXcg_polyline_set):
        doc: |
          Set of polylines which specify the location of the discretized curved interface segments.
      # alternative implicit descriptions of which several are possible but which have different description quality
      # topological ones
      # i) Set of pair of crystals sharing an interface
      crystals(N0):  # aka topology
        doc: |
          Set of pairs of identifiers for crystals which the interface connects.
        \@depends_on:
          doc: |
            The relevant NXms_feature_set instance to resolve crystal identifier.
      # ii) Set of pair of topologically connected triple points
      triple_points(N0): # aka topology
        doc: |
          Set of pairs of triple points which the interface segment connects.
        \@depends_on:
          doc: |
            The relevant NXms_feature_set instance to resolve triple_point identifier.
      # alternatively which polyline of adjoining interfaces 
      # more in spirit of descriptors
      # Set of pair of different thermodynamic phases to enable computations of the homo and heterophase boundary statistics
      discretization(NX_UINT): # aka polyline_segments(NX_UINT):
        doc: |
          Set of tuples of polyline segments which build the interface.
        \@depends_on:
          doc: |
            The relevant NXms_feature_set instance to resolve polyline segments.
    # the term triple_junction is used to name a group of features where three features meet
    # triple_line in a 3D description or a triple_point in a 2D description
    triple_line_projections(NXms_feature_set):
      # only for 2D, quad junction is the equivalent for 3D is not a triple_line
      # four alternative descriptors with different strength to specify spatial
      # or logical information about the triple junction feature set.
      # the explicit description often generating unnecessary information duplication
      geometry(NXcg_point_set): # in 2D there are no triple_junctions in 3D but only triple_lines
        doc: |
          Set of points which specify where triple points are assumed to be located.
        # needs no depends_on because is self-explanatory at the costs of duplicating information
      # or refer to already written information to reduce storage space by virtue of design
      # one view how to describe a triple junction is via its properties, i.e. its location
      # alternative implicit descriptions of which several are possible but which have different description quality
      location(N0):
        doc: |
          Set of identifier of point-like features. Each identifier resolves
          where the triple junctions are located.
        \@depends_on:
          doc: |
            The relevant NXms_feature_set instance to resolve locations of points/vertices.
      # another view to describe a triple junction is via its topology/connection expressed either via
      # i) triplet of interface identifier
      interfaces(N0): # aka topology or interfaces
        doc: |
          Set of triplets of identifier of line-like features.
          Each triplet resolves which three interface projections the triple point connects.
        \@depends_on:
          doc: |
            The relevant NXms_feature_set instance to resolve interface triplets.
        # there a implicit constraints
      # or a more programmatic/technical view
      # ii) a triplet of line segment identifier whereby the point-like features is assumed discretized via three polylines representing interfaces
      polylines(N0):
        doc: |
          Triplet of identifier of polyline segments. Each triplet resolves
          which three segments of polyline segments the triple junction connects.
        \@depends_on:
          doc: |
            The relevant NXms_feature_set instance to resolve polyline segments.
      # add all sort of other qualitative or quantitive descriptors (triple junction energy, volume etc)

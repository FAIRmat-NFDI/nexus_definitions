category: base
doc: |
  Base class to store state and (meta)data of an electron microscopy research event.
  
  The need for such a structuring instance inside NXevent_data_em_set is evident
  from the fact that electron microscopes are dynamic. Oftentimes it suffices
  to calibrate the instrument at the start of the session and use it throughout.
  How a microscope is used during this session and which pieces of information
  are collected is case dependent.
  
  NXevent_data_em represents an instance to describe and serialize flexibly
  whatever a researcher considers as the smallest discretization in time
  for which the instrument is considered stable and data may or not be collected
  during that time interval.
  
  The key idea behind offering such a modularized and generalized documentation
  system via NXevent_data_em and related base classes is not to demand that every
  user has to keep and document these data but if this is desired and useful
  for a research study users should use this base class, i.e. its concepts,
  its concept names, and taxonomy to document these pieces of information
  with the here standardized schema.
  
  For this reason the base class defines all fields and groups as optional.
  It is then the actual application definition which may demand - with the aim
  to enable verification of the record generated for the microscope session -
  that some of the here well-defined, concepts, names, and branches
  of the taxonomy are set as required or not.
  
  We are aware that given the variety how a microscope can be configured and used
  these application definitions may be group-specific, method-specific, maybe
  even project-specific. Therefore, the NXem application definition is de facto
  only one suggestion how such an application definition can look like.
  The key point is thought that just because one has different requirements
  this does not warrant to also cook up always an own schema in which the same
  concepts have such different names and even worse are placed in different
  locations of the taxonomy that is used for the serialization of the schema.
info: |
  Users may wish to take only a single scan or image and
  complete their microscope session. Alternatively, users are working much longer
  at the microscope, recalibrate it in between, and may take multiple data items
  (individual scan points, scan pattern, images, or spectra, or explore the state
  of the microscope maybe for service and maintenance). Each event may come with
  own detector settings and calibrations where the only common point is that
  one or a group of persons or robots have operated that specific microscope.
  
  For the single event use case one may argue that the need for an additional
  grouping like NXevent_data_em_set is redundant. Instead, the metadata could
  equally be stored inside the respective groups of a top-level NXinstrument group
  right within the application definition; or even simpler using a flat list
  of key value pairs. However, even for a session where only a single image,
  is taken it does also not harm too much to nest the data.
  
  In fact, oftentimes scientists feel that there is a need to store details
  about eventual drift of the specimen (if such data is available or measurable)
  or record changes of the lens excitations or apertures used. Although current
  microscopes are typically equipped with stabilization systems for individual
  components and instabilities, it can still be useful to have the possibility
  for storing flexibly granularizable time-dependent data and metadata in detail.
  
  Another reason if not a need for having more finely granularizable options for
  storing time-dependent data for electron microscopy, is that over the course
  of a session one may reconfigure the microscope. What is a reconfiguration?
  This could be the change of an aperture mode because a scientist may first
  have collected an image with some aperture but decides that a different aperture
  setting is better. As the aperture affects the electron beam, it will affect
  the system which may or not be worthwhile to document.
  
  Let aside for a moment the technology and business models, an electron microscope
  could be monitored (and will likely become more so in the future) for which
  spatio-temporal data about its components, locations of (hardware components)
  it streams out for the regions-of-interest (ROIs) analyzed.
  
  Eventually external stimuli are applied and the specimen is repositioned
  during a session at the microscope, again NXevent_data_em allows to store
  each position clearly with time stamps if this is desired.
  
  Some snapshot or integrated data from this stream are relevant for understanding
  signal genesis and electron/ion-beam-sample interaction (paths). In such a 
  generic case it might be necessary to sync these streaming data with those intervals
  in time when specific measurements are taken (spectra collected,
  images taken, diffraction images indexed on-the-fly, etc.).
  
  Therefore, both the instrument and specimen should always be considered as dynamic.
  Scientists often report or observe, admittedly oftentimes this is difficult to
  quantify, that microscopes *perform differently* across sessions, at different
  days, maybe dependent on whether rubber ducks where placed on the microscope
  or not.
  
  In some cases these observations come for unclear root causes. Users of the
  instrument may consider such conditions impractical, or *too poor*, and thus
  either abort their session. Alternatively, users may try to bring the microscope
  again into a state where conditions are considered better or of whatever
  high enough quality for continuing the measurement.
  
  In all these cases it is practical to have a mechanism whereby time-dependent
  data of the instrument state can be stored and documented in an interoperable way.
  Where should these data be stored? With NeXus these data should not only be
  stored in the respective instrument component groups of the top-level NXinstrument.
  
  The reason for this is that this group should be reserved for the as stable as
  possible quantities which do not change over the course of the session.
  One obvious example, is the name of the technology partner who built the
  microscope as in hopefully few cases users perform construction work on the
  microscope while trying to use it productively.
  
  With NXevent_data_em instances storing repetitively that there is a certain
  gun or detector available is solved, instead only the changes are stored.
  This is the purpose of the repeated em_lab group inside NXevent_data_em.
  
  Ideally, NXevent_data_em are equipped with a start_time and an end_time
  to represent a time interval (remind the idea of the instrument state stream)
  during which scientists considered (or practically had to consider) the
  microscope (especially ebeam and specimen) as stable enough.
  
  Arguably it is oftentimes tricky to specify a clear time interval when the
  microscope is *stable enough*. Take for instance the acquisition of an image
  or a stack of spectra. It is not fully possible to avoid instabilities
  within even a single image - drift can occur and has some random component to it.
  Maybe in many cases these instabilities are irrelevant but does this
  warrant to create a data schema where either the microscope state can only
  be stored very coarsely in time or one where the users are forced to store it
  very finely without having a demand for this?
  
  This is a question of how one wishes to granularize pieces of information.
  A possible solution is to consider each probed position, i.e. point in time
  when the beam was not blanked and thus when the beam illuminated a portion of
  material, i.e. the interaction volume, whose signal contributions are then
  counted by one or multiple detector(s) as per pixel - or per voxel, scan point
  signal in a region-of-interest (ROI).
  
  NXevent_data_em in combination with an application definition like NXem as one
  example allows researchers to document all of this. We understand that in
  many cases realizing such a fine temporal and logical granularization
  and data collection is hard to achieve in practice.
  
  We also understand that because of this in practice a frequently made choice,
  mainly for convenience, is that drift and scan distortions are considered
  a feature or an inaccuracy of the image and spectrum. Thus, one de facto
  accepts that the microscope was not as stable as expected during the acquisition
  of the image. We learn that the idea of a time interval is interpreted differently
  by different users.
  
  Here we consider the choice to focus on images and spectra, and eventually
  single position measurements as the smallest granularization level, which
  eventually may demand to add optional NXprocess instances into NXevent_data_em
  for storing respectively collected data of those distortions.
  
  Nevertheless, the distortions are typically corrected for by numerical protocols.
  This fact warrants to consider the distortion correction a computational workflow
  because of which it can be modelled as a chain of NXprocess instances
  each with own parameters. A more detailed overview of such computational steps
  to cope with scan distortions is available in the literature:
  
  * `C. Ophus et al. <https://dx.doi.org/10.1016/j.ultramic.2015.12.002>`_
  * `B. Berkels et al. <https://doi.org/10.1016/j.ultramic.2018.12.016>`_
  * `L. Jones et al. <https://link.springer.com/article/10.1186/s40679-015-0008-4>`_
  
  For specific simulation purposes, mainly in an effort to digitally repeat
  or simulate the experiment, it is tempting to consider dynamics of the
  instrument, implemented as time-dependent functional descriptions of
  e.g. lens excitations, beam shape functions, trajectories of groups of
  electrons and ions, or detector noise models.
  
  Noteworthy is that NXevent_data_em and all respective base classes can be
  used also for documenting such simulations. For now the preferred strategy
  to handle these cases is through customizations of the specific fields
  within NXevent_data_em instances. However, in the long run dedicated base class
  instances for specific models might be the cleaner option.
  
  Another alternative could be to sample finer, eventually dissimilarly along
  the time axis; however this may cause situations where an NXevent_data_em
  instance does not contain specific measurements (i.e. images, spectra of
  scientific relevance).
  
  In this case one should better go for a customized application definition
  with a functional property description inside members (fields or groups)
  in NXevent_data_em instances; or resort to a specific offspring application
  definition of NXem which documents metadata for tracking explicitly electrons
  (with ray-tracing based descriptors/computational geometry descriptors)
  or tracking of wave bundles.
  
  This perspective on much more subtle time-dependent considerations of electron
  microscopy can be advantageous also for storing details of time-dependent
  additional components that are coupled to and/or synced with a microscope.
  
  Examples include cutting-edge experiments where the electron beam gets
  coupled/excited by e.g. lasers. In this case, the laser unit should be
  registered under the top-level NXinstrument section. Its spatio-temporal
  details could be stored inside respective additional groups of the
  NXinstrument group that is stored inside instances of the here detailed
  NXevent_data_em base class.
type: group
NXevent_data_em(NXobject):
  start_time(NX_DATE_TIME):
    doc: |
      ISO 8601 time code with local time zone offset to UTC information included
      when the snapshot time interval started. If the user wishes to specify an
      interval of time that the snapshot should represent during which the instrument
      was stable and configured using specific settings and calibrations,
      the start_time is the start (left bound of the time interval) while
      the end_time specifies the end (right bound) of the time interval.
  end_time(NX_DATE_TIME):
    doc: |
      ISO 8601 time code with local time zone offset to UTC information included
      when the snapshot time interval ended.
  event_identifier(N0):
    unit: NX_UNITLESS
    doc: |
      Identifier of a specific state and setting of the microscope.
  event_type:
    doc: |
      Which specific event/measurement type. Examples are:
      
      * In-lens/backscattered electron, usually has quadrants
      * Secondary_electron, image, topography, fractography, overview images
      * Backscattered_electron, image, Z or channeling contrast (ECCI)
      * Bright_field, image, TEM
      * Dark_field, image, crystal defects
      * Annular dark field, image (medium- or high-angle), TEM
      * Diffraction, image, TEM, or a comparable technique in the SEM
      * Kikuchi, image, SEM EBSD and TEM diffraction
      * X-ray spectra (point, line, surface, volume), composition EDS/EDX(S)
      * Electron energy loss spectra for points, lines, surfaces, TEM
      * Auger, spectrum, (low Z contrast element composition)
      * Cathodoluminescence (optical spectra)
      * Ronchigram, image, alignment utility specifically in TEM
      * Chamber, e.g. TV camera inside the chamber, education purposes.
      
      This field may also be used for storing additional information
      about the event. For which there is at the moment no other place.
      
      In the long run such free-text field description should be avoid however
      as they are difficult to machine-interpret. The reason why in this base
      class the field event_type is nonetheless kept is to offer a place
      whereby practically users may enter data for follow-up modifications
      to arrive at an improve NXevent_data_em base class.
  (NXimage_r_set_diff):
  (NXimage_r_set):
  (NXimage_c_set):
  (NXspectrum_set):
  em_lab(NXinstrument):
     doc: |
        (Meta)data of the dynamics and changes of the microscope during the event.
     # no need to duplicate the fabrication because that should remain the
     (NXchamber):
     (NXebeam_column):
     (NXibeam_column):
     (NXoptical_system_em):
     (NXdetector):
     (NXpump):
     (NXstage_lab):
  (NXuser):
  (NXinteraction_vol_em):

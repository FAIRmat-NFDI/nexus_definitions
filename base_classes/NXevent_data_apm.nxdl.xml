<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2024-2025 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="base" type="group" name="NXevent_data_apm" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <symbols>
        <doc>
            The symbols used in the schema to specify e.g. dimensions of arrays.
        </doc>
        <symbol name="p">
            <doc>
                Number of pulses collected in between start_time and end_time.
            </doc>
        </symbol>
    </symbols>
    <doc>
        Base class to store state and (meta)data of events over the course of an atom probe experiment.
        
        Having at least one instance for an instance of NXapm is recommended.
        
        This base class applies the concept of the :ref:`NXevent_data_em` base class to the specific needs
        of atom probe research. Again static and dynamic quantities are split to avoid a duplication
        of information. Specifically, the time interval considered is the entire time
        starting at start_time until end_time during which we assume the pulser triggered pulses.
        These pulses are identified via the pulse_id field. The point in time when each pulse was
        fired can be recovered from analyzing start_time and delta_time.
        
        Which temporal granularity is adequate depends on the situation and research question.
        Using a model which enables a collection of events offers the most flexible way to cater for
        both atom probe experiments or simulation. To monitor the course of an ion extraction experiment
        (or simulation) it makes sense to track time explicitly via time stamps or implicitly
        via e.g. a clock inside the instrument, such as the clock of the pulser and respective pulse_id.
    </doc>
    <field name="start_time" type="NX_DATE_TIME">
        <doc>
            ISO 8601 time code with local time zone offset to UTC information included
            when the snapshot time interval started.
            
            If users wish to specify an interval of time that the snapshot should represent
            during which the instrument was stable and configured using specific settings and
            calibrations, the start_time is the start (left bound of the time interval) while
            the end_time specifies the end (right bound) of the time interval.
        </doc>
    </field>
    <field name="end_time" type="NX_DATE_TIME">
        <doc>
            ISO 8601 time code with local time zone offset to UTC information included
            when the snapshot time interval ended.
        </doc>
    </field>
    <field name="delta_time" type="NX_NUMBER" units="NX_TIME">
        <doc>
            Delta time array which resolves for each pulse_id the time difference
            between when that pulse was fired and start_time.
            
            In summary, using start_time, end_time, delta_time, pulse_id_offset,
            and pulse_id exactly specify the connection between when a pulse was
            fired relative to start_time and in absolute in coordinated world time UTC.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="p"/>
        </dimensions>
    </field>
    <field name="pulse_id_offset" type="NX_INT" units="NX_UNITLESS">
        <doc>
            Integer used to name the first pulse to know if there is an
            offset of the identifiers to zero.
            
            Identifiers can be defined either implicitly or explicitly.
            For implicit indexing identifiers are defined on the interval
	    :math:`[pulse\_id\_offset, pulse\_id\_offset + c - 1]`.
            
            Therefore, implicit identifier are completely defined by the value of
            pulse_id_offset and cardinality. For example if identifier run from
            -2 to 3 the value for pulse_id_offset is -2.
            
            For explicit indexing the field identifier has to be used.
            Fortran-/Matlab- and C-/Python-style indexing have specific implicit
            identifier conventions where pulse_id_offset is 1 and 0 respectively.
        </doc>
    </field>
    <field name="pulse_id" type="NX_INT" units="NX_UNITLESS">
        <doc>
            Identifier that contextualizes how the detector and pulser of an atom probe
            instrument follows a sequence of pulses to trigger field evaporation.
            
            The pulse_id is used to associate thus an information about time
            when quantities have been collected via sampling.
            
            In virtually all cases the pulser is a blackbox. Depending on how the
            instrument is configured during a measurement, the target
            values and thus also the actual values may change.
            
            Maybe the first part of the experiment is run at a certain pulse fraction but thereafter
            the pulse_fraction is changed. In this case the field pulse_fraction is a vector which
            collects all measured values of the pulse_fraction, pulse_id is then an equally
            long vector which stores the set of events (e.g. pulsing events) when that value was
            measured.
            
            This may lead to several cases: In the case that e.g. the pulse_fraction is never changed
            and also exact details not interesting, one stores the set value for the pulse_fraction
            and a single value for the pulse_id e.g. 0 to indicate that the pulse_fraction was set
            at the beginning and it was maintained constant during the measurement.
            
            If the pulse_fraction was e.g. changed after the 100000th pulse, pulse_fraction is a
            vector with two values. One value for the first and another one for the value from the
            100000th pulse onwards. The values of pulse_id are then [0, 99999] respectively.
        </doc>
        <dimensions rank="1">
            <dim index="1" value="p"/>
        </dimensions>
    </field>
    <group name="instrument" type="NXinstrument_apm">
        <doc>
            Place to store dynamic metadata of the instrument to document as close as possible
            the state of the instrument during the event, i.e. in between start_time and end_time.
        </doc>
    </group>
</definition>

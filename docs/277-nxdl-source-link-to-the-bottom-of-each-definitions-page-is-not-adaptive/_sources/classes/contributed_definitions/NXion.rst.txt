.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXion.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXion (base class)
    ! ion (base class)
    see: ion (base class); NXion

.. _NXion:

=====
NXion
=====

**Status**:

  *base class* (contribution), extends :ref:`NXobject`

**Description**:

  Base class for documenting the set of atoms of a (molecular) ion.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **n_ivec_max**: Maximum number of atoms/isotopes allowed per (molecular) ion (fragment).

  **n_ranges**: Number of mass-to-charge-state-ratio range intervals for ion type.

**Groups cited**:
  none

**Structure**:

  .. _/NXion/identifier-field:

  .. index:: identifier (field)

  **identifier**: (optional) :ref:`NX_CHAR <NX_CHAR>` :ref:`⤆ </NXobject/identifierNAME-field>`

    .. collapse:: A unique identifier whereby such an ion can be referred to ...

        A unique identifier whereby such an ion can be referred to
        via the service offered as described in identifier_type.

  .. _/NXion/identifier_type-field:

  .. index:: identifier_type (field)

  **identifier_type**: (optional) :ref:`NX_CHAR <NX_CHAR>` :ref:`⤆ </NXobject/identifierNAME-field>`

    .. collapse:: How can the identifier be resolved? ...

        How can the identifier be resolved?

        Obligatory value: ``inchi``

  .. _/NXion/ion_type-field:

  .. index:: ion_type (field)

  **ion_type**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Ion type (ion species) identifier. ...

        Ion type (ion species) identifier.

        The identifier zero is reserved for the special unknown ion type.

  .. _/NXion/nuclide_hash-field:

  .. index:: nuclide_hash (field)

  **nuclide_hash**: (optional) :ref:`NX_UINT <NX_UINT>` (Rank: 1, Dimensions: [n_ivec_max]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Vector of nuclide hash values. ...

        Vector of nuclide hash values.

        Individual hash values :math:`H` is :math:`H = Z + N \cdot 256` with :math:`Z`
        encode the number of protons :math:`Z` and the number of neutrons :math:`N`
        of each nuclide respectively. :math:`Z` and :math:`N` have to be 8-bit unsigned integers.

        The array is sorted in decreasing order. For the rationale behind this see `M. Kühbach et al. (2021) <https://doi.org/10.1017/S1431927621012241>`_

  .. _/NXion/nuclide_list-field:

  .. index:: nuclide_list (field)

  **nuclide_list**: (optional) :ref:`NX_UINT <NX_UINT>` (Rank: 2, Dimensions: [n_ivecmax, 2]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Table which decodes the entries in nuclide_hash into a human-readable matrix o ...

        Table which decodes the entries in nuclide_hash into a human-readable matrix of instances.
        The first column specifies the nuclide mass number, i.e. using the hashvalues
        from the isotope_vector this is :math:`Z + N` or 0. The value 0 documents that no
        isotope-specific information about the element encoded is relevant.
        The second row specifies the number of protons :math:`Z` or 0.
        The value 0 in this case documents a placeholder or that no element-specific
        information is relevant.
        Taking a carbon-14 nuclide as an example the mass number is 14.
        That is encoded as a value pair (14, 6) as one row of the table.

        Therefore, this notation is the typical superscribed nuclide mass number
        and subscripted number of protons element notation e.g. :math:`^{14}C`.
        The array is stored matching the order of nuclide_hash.

  .. _/NXion/volume-field:

  .. index:: volume (field)

  **volume**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_VOLUME <NX_VOLUME>`} 

    .. collapse:: Assumed volume of the ion. ...

        Assumed volume of the ion.

        In atom probe microscopy this field can be used to store the reconstructed
        volume per ion (average) which is typically stored alongside ranging
        definitions.

  .. _/NXion/charge-field:

  .. index:: charge (field)

  **charge**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_CHARGE <NX_CHARGE>`} 

    Charge of the ion.

  .. _/NXion/charge_state-field:

  .. index:: charge_state (field)

  **charge_state**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Signed charge state of the ion in multiples of electron charge. ...

        Signed charge state of the ion in multiples of electron charge.

        In the example of atom probe microscopy, only positive values will be measured
        as the ions are accelerated by a negatively signed bias electric field.
        In the case that the charge state is not explicitly recoverable, the value should
        be set to zero.

        In atom probe microscopy this is for example the case when using
        classical ranging definition files in formats like RNG, RRNG.
        These file formats do not document the charge state explicitly
        but the number of atoms of each element per molecular ion
        surplus the mass-to-charge-state-ratio interval.
        Details on ranging definition files can be found in the literature:
        `M. K. Miller <https://doi.org/10.1002/sia.1719>`_

  .. _/NXion/name-field:

  .. index:: name (field)

  **name**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    .. collapse:: Human-readable ion type name (e.g. Al +++) ...

        Human-readable ion type name (e.g. Al +++)
        The string should consists of UTF-8 characters, ideally using LaTeX
        notation to specify the isotopes, ions, and charge state.
        Examples are 12C + or Al +++.

        To ease automated parsing, isotope_vector should be the
        preferred machine-readable information used.

  .. _/NXion/mass_to_charge_range-field:

  .. index:: mass_to_charge_range (field)

  **mass_to_charge_range**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 2, Dimensions: [n_ranges, 2]) {units=\ :ref:`NX_ANY <NX_ANY>`} 

    .. collapse:: Associated lower (mqmin) and upper (mqmax) bounds of the ...

        Associated lower (mqmin) and upper (mqmax) bounds of the
        mass-to-charge-state ratio interval(s) [mqmin, mqmax]
        (boundaries inclusive). This field is primarily of interest
        for documenting :ref:`NXprocess` steps of indexing a
        ToF/mass-to-charge state histogram.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXion/charge-field </NXion/charge-field>`
* :ref:`/NXion/charge_state-field </NXion/charge_state-field>`
* :ref:`/NXion/identifier-field </NXion/identifier-field>`
* :ref:`/NXion/identifier_type-field </NXion/identifier_type-field>`
* :ref:`/NXion/ion_type-field </NXion/ion_type-field>`
* :ref:`/NXion/mass_to_charge_range-field </NXion/mass_to_charge_range-field>`
* :ref:`/NXion/name-field </NXion/name-field>`
* :ref:`/NXion/nuclide_hash-field </NXion/nuclide_hash-field>`
* :ref:`/NXion/nuclide_list-field </NXion/nuclide_list-field>`
* :ref:`/NXion/volume-field </NXion/volume-field>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXion.nxdl.xml

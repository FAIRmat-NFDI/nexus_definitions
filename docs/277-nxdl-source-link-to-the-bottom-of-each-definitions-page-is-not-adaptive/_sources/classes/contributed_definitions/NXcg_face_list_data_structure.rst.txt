.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXcg_face_list_data_structure.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXcg_face_list_data_structure (base class)
    ! cg_face_list_data_structure (base class)
    see: cg_face_list_data_structure (base class); NXcg_face_list_data_structure

.. _NXcg_face_list_data_structure:

=============================
NXcg_face_list_data_structure
=============================

**Status**:

  *base class* (contribution), extends :ref:`NXcg_primitive`

**Description**:

  .. collapse:: Computational geometry of primitives via a face-and-edge-list data structure. ...

      Computational geometry of primitives via a face-and-edge-list data structure.

      Primitives must neither be degenerated nor self-intersect but can have different
      properties. A face-and-edge-list-based description of primitives is
      frequently used for triangles and polyhedra to store them on disk for
      visualization purposes (see OFF, PLY, VTK, or STL file formats).

      Although this description is storage efficient, it is not well-suited for
      topological analyses. In this case using a half-edge data structure is
      an alternative.

      Having an own base class for the data structure how primitives are stored is
      useful to embrace both users with small or detailed specification demands.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **d**: The dimensionality, which has to be at least 2.

  **n_v**: The number of vertices.

  **n_e**: The number of edges.

  **n_f**: The number of faces.

  **n_total**: The total number of vertices of all faces. Faces are polygons.

**Groups cited**:
  none

**Structure**:

  .. _/NXcg_face_list_data_structure/number_of_vertices-field:

  .. index:: number_of_vertices (field)

  **number_of_vertices**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_f]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Number of vertices for each face. ...

        Number of vertices for each face.

        Each entry represents the total number of vertices for that face,
        irrespectively whether vertices are shared among faces or not.

  .. _/NXcg_face_list_data_structure/number_of_edges-field:

  .. index:: number_of_edges (field)

  **number_of_edges**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_e]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Number of edges for each face. ...

        Number of edges for each face.

        Each entry represents the total number of edges for that face,
        irrespectively whether edges are shared across faces or not.

  .. _/NXcg_face_list_data_structure/number_of_faces-field:

  .. index:: number_of_faces (field)

  **number_of_faces**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Number of faces of the primitives.

  .. _/NXcg_face_list_data_structure/identifier_vertex_offset-field:

  .. index:: identifier_vertex_offset (field)

  **identifier_vertex_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer offset whereby the identifier of the first member ...

        Integer offset whereby the identifier of the first member
        of the vertices differs from zero.

        Identifier can be defined explicitly or implicitly.
        Inspect the definition of NXcg_primitive for further details.

  .. _/NXcg_face_list_data_structure/identifier_edge_offset-field:

  .. index:: identifier_edge_offset (field)

  **identifier_edge_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer offset whereby the identifier of the first member ...

        Integer offset whereby the identifier of the first member
        of the edges differs from zero.

        Identifier can be defined explicitly or implicitly.
        Inspect the definition of NXcg_primitive for further details.

  .. _/NXcg_face_list_data_structure/identifier_face_offset-field:

  .. index:: identifier_face_offset (field)

  **identifier_face_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer offset whereby the identifier of the first member ...

        Integer offset whereby the identifier of the first member
        of the faces differs from zero.

        Identifier can be defined explicitly or implicitly.
        Inspect the definition of NXcg_primitive for further details.

  .. _/NXcg_face_list_data_structure/identifier_vertex-field:

  .. index:: identifier_vertex (field)

  **identifier_vertex**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_v]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Integer identifier to distinguish all vertices explicitly.

  .. _/NXcg_face_list_data_structure/identifier_edge-field:

  .. index:: identifier_edge (field)

  **identifier_edge**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_e]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Integer used to distinguish all edges explicitly.

  .. _/NXcg_face_list_data_structure/identifier_face-field:

  .. index:: identifier_face (field)

  **identifier_face**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_f]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Integer used to distinguish all faces explicitly.

  .. _/NXcg_face_list_data_structure/vertices-field:

  .. index:: vertices (field)

  **vertices**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 2, Dimensions: [n_v, d]) {units=\ :ref:`NX_ANY <NX_ANY>`} 

    .. collapse:: Positions of the vertices. ...

        Positions of the vertices.

        Users are encouraged to reduce the vertices to a unique set as this may
        result in more efficient storage. Alternatively, storing vertex positions naively
        should be indicated with setting vertices_are_unique to False.
        Naively means that each vertex is stored even though many vertices may
        share the same positions.

  .. _/NXcg_face_list_data_structure/edges-field:

  .. index:: edges (field)

  **edges**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [n_e, 2]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    The edges are stored as pairs of vertex identifier.

  .. _/NXcg_face_list_data_structure/faces-field:

  .. index:: faces (field)

  **faces**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_total]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: The faces are stored as a concatenated array of vertex identifier tuples. ...

        The faces are stored as a concatenated array of vertex identifier tuples.

        The first entry is the identifier of the start vertex of the first face,
        followed by the second vertex of the first face, until the last vertex
        of the first face. Thereafter, the start vertex of the second face, the
        second vertex of the second face, and so on and so forth.

        Therefore, summating over the number_of_vertices, allows to extract
        the vertex identifiers for the i-th face on the following index interval
        of the faces array: :math:`[\sum_{i = 0}^{i = n-1}, \sum_{i=0}^{i = n}]`.

  .. _/NXcg_face_list_data_structure/vertices_are_unique-field:

  .. index:: vertices_are_unique (field)

  **vertices_are_unique**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` 

    .. collapse:: If true, indicates that the vertices are all placed at different positions ...

        If true, indicates that the vertices are all placed at different positions
        and have different identifiers, i.e. no points overlap or are counted more
        than once.

  .. _/NXcg_face_list_data_structure/edges_are_unique-field:

  .. index:: edges_are_unique (field)

  **edges_are_unique**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` 

    .. collapse:: If true, indicates that no edge is stored more than once. ...

        If true, indicates that no edge is stored more than once.

        Users are encouraged to consider using a half_edge_data_structure instead.

  .. _/NXcg_face_list_data_structure/faces_are_unique-field:

  .. index:: faces_are_unique (field)

  **faces_are_unique**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` 

    If true, indicates that no face is stored more than once.

  .. _/NXcg_face_list_data_structure/winding_order-field:

  .. index:: winding_order (field)

  **winding_order**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_f]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Specifies for each face which winding order was used if any: ...

        Specifies for each face which winding order was used if any:

        * 0 - undefined
        * 1 - counter-clockwise (CCW)
        * 2 - clock-wise (CW)


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXcg_face_list_data_structure/edges-field </NXcg_face_list_data_structure/edges-field>`
* :ref:`/NXcg_face_list_data_structure/edges_are_unique-field </NXcg_face_list_data_structure/edges_are_unique-field>`
* :ref:`/NXcg_face_list_data_structure/faces-field </NXcg_face_list_data_structure/faces-field>`
* :ref:`/NXcg_face_list_data_structure/faces_are_unique-field </NXcg_face_list_data_structure/faces_are_unique-field>`
* :ref:`/NXcg_face_list_data_structure/identifier_edge-field </NXcg_face_list_data_structure/identifier_edge-field>`
* :ref:`/NXcg_face_list_data_structure/identifier_edge_offset-field </NXcg_face_list_data_structure/identifier_edge_offset-field>`
* :ref:`/NXcg_face_list_data_structure/identifier_face-field </NXcg_face_list_data_structure/identifier_face-field>`
* :ref:`/NXcg_face_list_data_structure/identifier_face_offset-field </NXcg_face_list_data_structure/identifier_face_offset-field>`
* :ref:`/NXcg_face_list_data_structure/identifier_vertex-field </NXcg_face_list_data_structure/identifier_vertex-field>`
* :ref:`/NXcg_face_list_data_structure/identifier_vertex_offset-field </NXcg_face_list_data_structure/identifier_vertex_offset-field>`
* :ref:`/NXcg_face_list_data_structure/number_of_edges-field </NXcg_face_list_data_structure/number_of_edges-field>`
* :ref:`/NXcg_face_list_data_structure/number_of_faces-field </NXcg_face_list_data_structure/number_of_faces-field>`
* :ref:`/NXcg_face_list_data_structure/number_of_vertices-field </NXcg_face_list_data_structure/number_of_vertices-field>`
* :ref:`/NXcg_face_list_data_structure/vertices-field </NXcg_face_list_data_structure/vertices-field>`
* :ref:`/NXcg_face_list_data_structure/vertices_are_unique-field </NXcg_face_list_data_structure/vertices_are_unique-field>`
* :ref:`/NXcg_face_list_data_structure/winding_order-field </NXcg_face_list_data_structure/winding_order-field>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXcg_face_list_data_structure.nxdl.xml

.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXms_recon.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXms_recon (base class)
    ! ms_recon (base class)
    see: ms_recon (base class); NXms_recon

.. _NXms_recon:

==========
NXms_recon
==========

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: Base class to describe discretized (micro)structural features of a material. ...

      Base class to describe discretized (micro)structural features of a material.

      One instance of this base class can be used to describe the current configuration
      the base class does not include time-dependent descriptions for the sake of
      clarity and because of the fact that virtually all simulations or experiments
      probe time by sampling. Therefore, time-dependent state descriptions should
      be realized with creating a set of :ref:`NXms_snapshot_set` with instances of
      :ref:`NXms_snapshot` using e.g. :ref:`NXms_recon` base class instances.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **n_c_two**: The number of crystal projections.

  **n_i_two**: The number of interface projections.

  **n_t_two**: The number of assumed triple junction projections aka triple points.

  **n_c**: The number of crystals.

  **n_i**: The number of interfaces

  **n_t**: The number of triple lines

  **n_q**: The number of quadruple junctions.

**Groups cited**:
  :ref:`NXcg_point_set`, :ref:`NXcg_polyhedron_set`, :ref:`NXcg_polyline_set`, :ref:`NXcg_triangle_set`, :ref:`NXms_feature_set`, :ref:`NXprocess`, :ref:`NXrotation_set`

.. index:: NXprocess (base class); used in base class, NXcg_point_set (base class); used in base class, NXcg_polyline_set (base class); used in base class, NXcg_triangle_set (base class); used in base class, NXcg_polyhedron_set (base class); used in base class, NXms_feature_set (base class); used in base class, NXrotation_set (base class); used in base class

**Structure**:

  .. _/NXms_recon/configuration-group:

  **configuration**: (optional) :ref:`NXprocess` 

    .. collapse:: The configuration and parameterization of the reconstruction algorithm ...

        The configuration and parameterization of the reconstruction algorithm
        whereby the microstructural features were identified.

    .. _/NXms_recon/configuration/dimensionality-field:

    .. index:: dimensionality (field)

    **dimensionality**: (optional) :ref:`NX_POSINT <NX_POSINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Dimensionality of the analysis. ...

          Dimensionality of the analysis.

          This field can be used e.g. by a research data management system
          to identify if the described feature set specifies a
          one-, two-, or three-dimensional feature set.

          Any of these values: ``1`` | ``2`` | ``3``

    .. _/NXms_recon/configuration/algorithm-field:

    .. index:: algorithm (field)

    **algorithm**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

      .. collapse:: Which algorithm is used to reconstruct the features. ...

          Which algorithm is used to reconstruct the features.

          Any of these values:

            * ``unknown``

            * ``disorientation_clustering``

            * ``fast_multiscale_clustering``

            * ``markov_chain_clustering``


    .. _/NXms_recon/configuration/disorientation_threshold-field:

    .. index:: disorientation_threshold (field)

    **disorientation_threshold**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`} 

      .. collapse:: Threshold to define at which disorientation angle to assume ...

          Threshold to define at which disorientation angle to assume
          two crystalline regions have a significant orientation difference
          which warrants to argue that there is an interface between the
          two regions.

  .. _/NXms_recon/points-group:

  **points**: (optional) :ref:`NXcg_point_set` 


  .. _/NXms_recon/lines-group:

  **lines**: (optional) :ref:`NXcg_polyline_set` 


  .. _/NXms_recon/surfaces-group:

  **surfaces**: (optional) :ref:`NXcg_triangle_set` 


  .. _/NXms_recon/volumes-group:

  **volumes**: (optional) :ref:`NXcg_polyhedron_set` 


  .. _/NXms_recon/crystal_projections-group:

  **crystal_projections**: (optional) :ref:`NXms_feature_set` 

    .. collapse:: Projections of crystals on the sample surface as typically ...

        Projections of crystals on the sample surface as typically
        characterized with optical or electron microscopy.

    .. _/NXms_recon/crystal_projections@discretization-attribute:

    .. index:: discretization (group attribute)

    **@discretization**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

      .. collapse:: Reference to lines(NXcg_polyline_set) which supports the ...

          Reference to lines(NXcg_polyline_set) which supports the
          discretized shape of each cross-sectioned crystal.

          Most microscopy techniques support to generate only a two-dimensional
          representation (projection) of the characterized material.

          For true volumetric techniques use the specifically
          specialized crystals :ref:`NXms_feature_set` instead.
          See stereology literature for more details e.g.
          E.E. Underwood's book entitled Quantitative Stereology

    .. _/NXms_recon/crystal_projections/number_of_crystals-field:

    .. index:: number_of_crystals (field)

    **number_of_crystals**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Number of crystals.

    .. _/NXms_recon/crystal_projections/crystal_identifier_offset-field:

    .. index:: crystal_identifier_offset (field)

    **crystal_identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Integer offset whereby the identifier of the first member ...

          Integer offset whereby the identifier of the first member
          of the set differs from zero.

          Identifiers can be defined either implicitly or explicitly.
          For implicit indexing identifiers are defined on the interval
          :math:`[identifier\_offset, identifier\_offset + c - 1]`.

    .. _/NXms_recon/crystal_projections/crystal_identifier-field:

    .. index:: crystal_identifier (field)

    **crystal_identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_c_two]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Identifier used for crystals for explicit indexing.

    .. _/NXms_recon/crystal_projections/number_of_phases-field:

    .. index:: number_of_phases (field)

    **number_of_phases**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      How many phases are distinguished

    .. _/NXms_recon/crystal_projections/phase_identifier_offset-field:

    .. index:: phase_identifier_offset (field)

    **phase_identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Integer offset whereby the identifier of the first member ...

          Integer offset whereby the identifier of the first member
          of the set differs from zero.

    .. _/NXms_recon/crystal_projections/phase_identifier-field:

    .. index:: phase_identifier (field)

    **phase_identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_c_two]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Identifier used for phase for explicit indexing.

    .. _/NXms_recon/crystal_projections/boundary_contact-field:

    .. index:: boundary_contact (field)

    **boundary_contact**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` (Rank: 1, Dimensions: [n_c_two]) 

      .. collapse:: True, if the crystal makes contact with the edge of the ROI, ...

          True, if the crystal makes contact with the edge of the ROI,
          false otherwise.

    .. _/NXms_recon/crystal_projections/orientation_spread-field:

    .. index:: orientation_spread (field)

    **orientation_spread**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [n_c_two]) {units=\ :ref:`NX_ANGLE <NX_ANGLE>`} 

      .. collapse:: Average disorientation angle between individual orientation of the ...

          Average disorientation angle between individual orientation of the
          crystal at probed positions (weighted by area of that position) versus
          the average disorientation of the crystal.

    .. _/NXms_recon/crystal_projections/area-field:

    .. index:: area (field)

    **area**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [n_c_two]) {units=\ :ref:`NX_AREA <NX_AREA>`} 

      Calibrated area of surrounded by the polyline about each crystal.

    .. _/NXms_recon/crystal_projections/ROTATION_SET-group:

    **ROTATION_SET**: (optional) :ref:`NXrotation_set` 


  .. _/NXms_recon/interface_projections-group:

  **interface_projections**: (optional) :ref:`NXms_feature_set` 

    .. collapse:: Projections of grain or phase boundaries as typically sectioned ...

        Projections of grain or phase boundaries as typically sectioned
        with optical or electron microscopy characterization.

    .. _/NXms_recon/interface_projections@discretization-attribute:

    .. index:: discretization (group attribute)

    **@discretization**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

      .. collapse:: Reference to lines(NXcg_polyline_set) which supports the ...

          Reference to lines(NXcg_polyline_set) which supports the
          discretized shape of each cross-sectioned crystal.

          Set of tuples of polyline segments which build the interface.

    .. _/NXms_recon/interface_projections/crystals-field:

    .. index:: crystals (field)

    **crystals**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [n_i_two, 2]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Set of pairs of crystal_identifier resolved via depends_on which ...

          Set of pairs of crystal_identifier resolved via depends_on which
          are adjacent to each interface.

      .. _/NXms_recon/interface_projections/crystals@depends_on-attribute:

      .. index:: depends_on (field attribute)

      **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

        .. collapse:: The specific crystal_projections(NXms_feature_set) instance ...

            The specific crystal_projections(NXms_feature_set) instance
            to resolve crystal identifier.

    .. _/NXms_recon/interface_projections/triple_points-field:

    .. index:: triple_points (field)

    **triple_points**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [n_i_two, 2]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Set of pairs of triple_point_identifier which the interface connects. ...

          Set of pairs of triple_point_identifier which the interface connects.
          For 2D projections of 3D microstructural features a triple point is
          physically only the projection of a triple line.

      .. _/NXms_recon/interface_projections/triple_points@depends_on-attribute:

      .. index:: depends_on (field attribute)

      **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

        .. collapse:: The specific triple_line_projections(NXms_feature_set) instance ...

            The specific triple_line_projections(NXms_feature_set) instance
            whereby to resolve triple_point identifier.

    .. _/NXms_recon/interface_projections/length-field:

    .. index:: length (field)

    **length**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [n_i_two]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

      .. collapse:: The length of the interface. ...

          The length of the interface.

          This is not necessarily the same as the length of the individual
          polyline segments whereby the interface is discretized.

          The actual coordinate system whereby the geometry is calibrated
          with real physical dimensions is typically documented by the
          depends_on attribute of the respective NXcg_primitive_set.
          This depends_on attribute should point explicitly to an
          instance of a :ref:`NXcoordinate_system` to support users as
          much as possible with interpreting how and where the lines are
          located in the reference frame.

    .. _/NXms_recon/interface_projections/interface_identifier_offset-field:

    .. index:: interface_identifier_offset (field)

    **interface_identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Integer offset whereby the identifier of the first member ...

          Integer offset whereby the identifier of the first member
          of the set differs from zero.

          Identifiers can be defined either implicitly or explicitly.
          For implicit indexing identifiers are defined on the interval
          :math:`[identifier\_offset, identifier\_offset + c - 1]`.

    .. _/NXms_recon/interface_projections/interface_identifier-field:

    .. index:: interface_identifier (field)

    **interface_identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_i_two]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Identifier for each interface using explicit indexing.

  .. _/NXms_recon/triple_line_projections-group:

  **triple_line_projections**: (optional) :ref:`NXms_feature_set` 

    .. collapse:: Projections of triple lines as typically characterized with optical ...

        Projections of triple lines as typically characterized with optical
        or electron microscopy.

        Mind that most specimens are thermo-chemo-mechanically treated before
        they are characterized. Therefore, the projected crystal defects are
        have physically no longer the same structure as in the bulk.

        Examples are manifest as effects such as thermal grooving, or relaxation
        effects of an intersection between a triple line that is cut
        by the specimen surface as these defects are then exposed typically
        to a different atmosphere and hence have different thermodynamic boundary
        conditions than of their true volumetric defects in the bulk.

    .. _/NXms_recon/triple_line_projections@discretization-attribute:

    .. index:: discretization (group attribute)

    **@discretization**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

      .. collapse:: Reference to points(NXcg_point_set) which supports the ...

          Reference to points(NXcg_point_set) which supports the
          locations of these triple points.

    .. _/NXms_recon/triple_line_projections/number_of_triple_points-field:

    .. index:: number_of_triple_points (field)

    **number_of_triple_points**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Number of triple points.

    .. _/NXms_recon/triple_line_projections/triple_point_identifier_offset-field:

    .. index:: triple_point_identifier_offset (field)

    **triple_point_identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Integer offset whereby the identifier of the first member ...

          Integer offset whereby the identifier of the first member
          of the set differs from zero.

          Identifiers can be defined either implicitly or explicitly.
          For implicit indexing identifiers are defined on the interval
          :math:`[identifier\_offset, identifier\_offset + c - 1]`.

    .. _/NXms_recon/triple_line_projections/triple_point_identifier-field:

    .. index:: triple_point_identifier (field)

    **triple_point_identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_t_two]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Identifier for each triple point using explicit indexing.

    .. _/NXms_recon/triple_line_projections/location-field:

    .. index:: location (field)

    **location**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_t_two]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      Set of triple point identifiers.

      .. _/NXms_recon/triple_line_projections/location@depends_on-attribute:

      .. index:: depends_on (field attribute)

      **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

        .. collapse:: The relevant points(NXcg_point_set) instance whereby to ...

            The relevant points(NXcg_point_set) instance whereby to
            resolve interface identifiers.

    .. _/NXms_recon/triple_line_projections/interfaces-field:

    .. index:: interfaces (field)

    **interfaces**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [n_t_two, 3]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Set of triplets of identifier of line-like features. ...

          Set of triplets of identifier of line-like features.
          Each triplet resolves which three interface projections
          the triple point connects.

      .. _/NXms_recon/triple_line_projections/interfaces@depends_on-attribute:

      .. index:: depends_on (field attribute)

      **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

        .. collapse:: The specific interface_projections(NXms_feature_set) ...

            The specific interface_projections(NXms_feature_set)
            instance whereby to resolve interface identifiers.

    .. _/NXms_recon/triple_line_projections/polylines-field:

    .. index:: polylines (field)

    **polylines**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [n_t_two, 3]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

      .. collapse:: Triplet of identifier of polyline segments. Each triplet resolves ...

          Triplet of identifier of polyline segments. Each triplet resolves
          which three segments of polyline segments the triple junction connects.

      .. _/NXms_recon/triple_line_projections/polylines@depends_on-attribute:

      .. index:: depends_on (field attribute)

      **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

        .. collapse:: The specific lines(NXcg_polyline_set) instance to resolve ...

            The specific lines(NXcg_polyline_set) instance to resolve
            polyline segments.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXms_recon/configuration-group </NXms_recon/configuration-group>`
* :ref:`/NXms_recon/configuration/algorithm-field </NXms_recon/configuration/algorithm-field>`
* :ref:`/NXms_recon/configuration/dimensionality-field </NXms_recon/configuration/dimensionality-field>`
* :ref:`/NXms_recon/configuration/disorientation_threshold-field </NXms_recon/configuration/disorientation_threshold-field>`
* :ref:`/NXms_recon/crystal_projections-group </NXms_recon/crystal_projections-group>`
* :ref:`/NXms_recon/crystal_projections/area-field </NXms_recon/crystal_projections/area-field>`
* :ref:`/NXms_recon/crystal_projections/boundary_contact-field </NXms_recon/crystal_projections/boundary_contact-field>`
* :ref:`/NXms_recon/crystal_projections/crystal_identifier-field </NXms_recon/crystal_projections/crystal_identifier-field>`
* :ref:`/NXms_recon/crystal_projections/crystal_identifier_offset-field </NXms_recon/crystal_projections/crystal_identifier_offset-field>`
* :ref:`/NXms_recon/crystal_projections/number_of_crystals-field </NXms_recon/crystal_projections/number_of_crystals-field>`
* :ref:`/NXms_recon/crystal_projections/number_of_phases-field </NXms_recon/crystal_projections/number_of_phases-field>`
* :ref:`/NXms_recon/crystal_projections/orientation_spread-field </NXms_recon/crystal_projections/orientation_spread-field>`
* :ref:`/NXms_recon/crystal_projections/phase_identifier-field </NXms_recon/crystal_projections/phase_identifier-field>`
* :ref:`/NXms_recon/crystal_projections/phase_identifier_offset-field </NXms_recon/crystal_projections/phase_identifier_offset-field>`
* :ref:`/NXms_recon/crystal_projections/ROTATION_SET-group </NXms_recon/crystal_projections/ROTATION_SET-group>`
* :ref:`/NXms_recon/crystal_projections@discretization-attribute </NXms_recon/crystal_projections@discretization-attribute>`
* :ref:`/NXms_recon/interface_projections-group </NXms_recon/interface_projections-group>`
* :ref:`/NXms_recon/interface_projections/crystals-field </NXms_recon/interface_projections/crystals-field>`
* :ref:`/NXms_recon/interface_projections/crystals@depends_on-attribute </NXms_recon/interface_projections/crystals@depends_on-attribute>`
* :ref:`/NXms_recon/interface_projections/interface_identifier-field </NXms_recon/interface_projections/interface_identifier-field>`
* :ref:`/NXms_recon/interface_projections/interface_identifier_offset-field </NXms_recon/interface_projections/interface_identifier_offset-field>`
* :ref:`/NXms_recon/interface_projections/length-field </NXms_recon/interface_projections/length-field>`
* :ref:`/NXms_recon/interface_projections/triple_points-field </NXms_recon/interface_projections/triple_points-field>`
* :ref:`/NXms_recon/interface_projections/triple_points@depends_on-attribute </NXms_recon/interface_projections/triple_points@depends_on-attribute>`
* :ref:`/NXms_recon/interface_projections@discretization-attribute </NXms_recon/interface_projections@discretization-attribute>`
* :ref:`/NXms_recon/lines-group </NXms_recon/lines-group>`
* :ref:`/NXms_recon/points-group </NXms_recon/points-group>`
* :ref:`/NXms_recon/surfaces-group </NXms_recon/surfaces-group>`
* :ref:`/NXms_recon/triple_line_projections-group </NXms_recon/triple_line_projections-group>`
* :ref:`/NXms_recon/triple_line_projections/interfaces-field </NXms_recon/triple_line_projections/interfaces-field>`
* :ref:`/NXms_recon/triple_line_projections/interfaces@depends_on-attribute </NXms_recon/triple_line_projections/interfaces@depends_on-attribute>`
* :ref:`/NXms_recon/triple_line_projections/location-field </NXms_recon/triple_line_projections/location-field>`
* :ref:`/NXms_recon/triple_line_projections/location@depends_on-attribute </NXms_recon/triple_line_projections/location@depends_on-attribute>`
* :ref:`/NXms_recon/triple_line_projections/number_of_triple_points-field </NXms_recon/triple_line_projections/number_of_triple_points-field>`
* :ref:`/NXms_recon/triple_line_projections/polylines-field </NXms_recon/triple_line_projections/polylines-field>`
* :ref:`/NXms_recon/triple_line_projections/polylines@depends_on-attribute </NXms_recon/triple_line_projections/polylines@depends_on-attribute>`
* :ref:`/NXms_recon/triple_line_projections/triple_point_identifier-field </NXms_recon/triple_line_projections/triple_point_identifier-field>`
* :ref:`/NXms_recon/triple_line_projections/triple_point_identifier_offset-field </NXms_recon/triple_line_projections/triple_point_identifier_offset-field>`
* :ref:`/NXms_recon/triple_line_projections@discretization-attribute </NXms_recon/triple_line_projections@discretization-attribute>`
* :ref:`/NXms_recon/volumes-group </NXms_recon/volumes-group>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXms_recon.nxdl.xml

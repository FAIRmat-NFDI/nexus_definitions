.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXcg_polygon_set.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXcg_polygon_set (base class)
    ! cg_polygon_set (base class)
    see: cg_polygon_set (base class); NXcg_polygon_set

.. _NXcg_polygon_set:

================
NXcg_polygon_set
================

**Status**:

  base class, extends :ref:`NXcg_primitive_set`

**Description**:

  .. collapse:: Computational geometry description of a set of polygons in Euclidean space. ...

      Computational geometry description of a set of polygons in Euclidean space.

      Polygons are specialized polylines:

      * A polygon is a geometric primitive that is bounded by a closed polyline
      * All vertices of this polyline lay in the d-1 dimensional plane.
        whereas vertices of a polyline do not necessarily lay on a plane.
      * A polygon has at least three vertices.

      Each polygon is built from a sequence of vertices (points with identifiers).
      The members of a set of polygons may have a different number of vertices.
      Sometimes a collection/set of polygons is referred to as a soup of polygons.

      As three-dimensional objects, a set of polygons can be used to define the
      hull of what is effectively a polyhedron; however users are advised to use
      the specific :ref:`NXcg_polyhedron_set` base class if they wish to describe closed
      polyhedra. Even more general complexes can be thought of. An example are the
      so-called piecewise-linear complexes used in the TetGen library.

      As these complexes can have holes though, polyhedra without holes are one
      subclass of such complexes, users should rather design an own
      base class e.g. NXcg_polytope_set to describe such even more
      complex primitives instead of abusing this base class for such purposes.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **d**: The dimensionality, which has to be either 2 or 3.

  **c**: The cardinality of the set, i.e. the number of polygons.

  **n_total**: The total number of vertices when visiting every polygon.

**Groups cited**:
  :ref:`NXcg_face_list_data_structure`, :ref:`NXcg_half_edge_data_structure`

.. index:: NXcg_face_list_data_structure (base class); used in base class, NXcg_half_edge_data_structure (base class); used in base class

**Structure**:

  .. _/NXcg_polygon_set/number_of_total_vertices-field:

  .. index:: number_of_total_vertices (field)

  **number_of_total_vertices**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    The total number of vertices in the set.

  .. _/NXcg_polygon_set/edge_length-field:

  .. index:: edge_length (field)

  **edge_length**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_LENGTH <NX_LENGTH>`} 

    For each polygon its accumulated length along its edges.

  .. _/NXcg_polygon_set/interior_angle-field:

  .. index:: interior_angle (field)

  **interior_angle**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` (Rank: 1, Dimensions: [n_total]) {units=\ :ref:`NX_ANGLE <NX_ANGLE>`} 

    .. collapse:: Interior angles for each polygon. There are as many values per polygon ...

        Interior angles for each polygon. There are as many values per polygon
        as the are number_of_vertices.
        The angle is the angle at the specific vertex, i.e. between the adjoining
        edges of the vertex according to the sequence in the polygons array.
        Usually, the winding_order field is required to interpret the value.

  .. _/NXcg_polygon_set/shape-field:

  .. index:: shape (field)

  **shape**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [c]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Curvature type: ...

        Curvature type:

        * 0 - unspecified,
        * 1 - convex,
        * 2 - concave

  .. _/NXcg_polygon_set/polygons-group:

  **polygons**: (optional) :ref:`NXcg_face_list_data_structure` 

    Combined storage of all primitives of all polygons.

  .. _/NXcg_polygon_set/polygonID-group:

  **polygonID**: (optional) :ref:`NXcg_face_list_data_structure` 

    Individual storage of the mesh of each polygon.

  .. _/NXcg_polygon_set/polygon_half_edgeID-group:

  **polygon_half_edgeID**: (optional) :ref:`NXcg_half_edge_data_structure` 

    Individual storage of each polygon as a graph.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXcg_polygon_set/edge_length-field </NXcg_polygon_set/edge_length-field>`
* :ref:`/NXcg_polygon_set/interior_angle-field </NXcg_polygon_set/interior_angle-field>`
* :ref:`/NXcg_polygon_set/number_of_total_vertices-field </NXcg_polygon_set/number_of_total_vertices-field>`
* :ref:`/NXcg_polygon_set/polygon_half_edgeID-group </NXcg_polygon_set/polygon_half_edgeID-group>`
* :ref:`/NXcg_polygon_set/polygonID-group </NXcg_polygon_set/polygonID-group>`
* :ref:`/NXcg_polygon_set/polygons-group </NXcg_polygon_set/polygons-group>`
* :ref:`/NXcg_polygon_set/shape-field </NXcg_polygon_set/shape-field>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXcg_polygon_set.nxdl.xml

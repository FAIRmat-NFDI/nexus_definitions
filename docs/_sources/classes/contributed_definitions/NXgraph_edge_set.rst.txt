.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXgraph_edge_set.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXgraph_edge_set (base class)
    ! graph_edge_set (base class)
    see: graph_edge_set (base class); NXgraph_edge_set

.. _NXgraph_edge_set:

================
NXgraph_edge_set
================

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: A set of (eventually directed) edges which connect nodes of a graph. ...

      A set of (eventually directed) edges which connect nodes of a graph.

      Use as a direct child of an instance of :ref:`NXgraph_root`.
      Alternatively, use depends_on to specify which instance
      of :ref:`NXgraph_root` is defined by this instance.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **n_edges**: The number of edges.

**Groups cited**:
  none

**Structure**:

  .. _/NXgraph_edge_set@depends_on-attribute:

  .. index:: depends_on (file attribute)

  **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    .. collapse:: Specify which instance of :ref:`NXgraph_root` this :ref:`NXgraph_edge_set` ...

        Specify which instance of :ref:`NXgraph_root` this :ref:`NXgraph_edge_set`
        refers to.

  .. _/NXgraph_edge_set/number_of_edges-field:

  .. index:: number_of_edges (field)

  **number_of_edges**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Total number of edges, counting eventual bidirectional edges only once.

  .. _/NXgraph_edge_set/identifier_offset-field:

  .. index:: identifier_offset (field)

  **identifier_offset**: (optional) :ref:`NX_INT <NX_INT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Integer which specifies the first index to be used for distinguishing ...

        Integer which specifies the first index to be used for distinguishing
        edges. Identifiers are defined either implicitly or explicitly.

        For implicit indexing the identifiers are defined on the interval
        :math:`[identifier\_offset, identifier\_offset + c - 1]`.

        For explicit indexing use the field identifier. For implicit indexing,
        consult :ref:`NXcg_primitive_set` to get guidance how to set identifier_offset.

  .. _/NXgraph_edge_set/identifier-field:

  .. index:: identifier (field)

  **identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_edges]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Integer used to distinguish edges for explicit indexing.

  .. _/NXgraph_edge_set/directionality-field:

  .. index:: directionality (field)

  **directionality**: (optional) :ref:`NX_UINT <NX_UINT>` (Rank: 1, Dimensions: [n_edges]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Specifier whether each edge is non-directional, one-directional, ...

        Specifier whether each edge is non-directional, one-directional,
        or bidirectional. Use the smallest available binary representation
        which can store three different states:

        * 0 / state 0x00 is non-directional
        * 1 / state 0x01 is one-directional
        * 2 / state 0x02 is bi-directional

  .. _/NXgraph_edge_set/node_pair-field:

  .. index:: node_pair (field)

  **node_pair**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 2, Dimensions: [n_edges, 2]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Pairs of node/vertex identifier. Each pair represents the connection ...

        Pairs of node/vertex identifier. Each pair represents the connection
        between two nodes. The order in the pair encodes eventual directionality.

        In the case that an edge is non- or bi-directional, storing
        node identifier in ascending order is preferred.

        In the case that an edge is one-directional, node identifier should be
        stored such that the identifier of the source node is the first entry
        and the identifier of the target is the second entry in the pair.

  .. _/NXgraph_edge_set/is_a-field:

  .. index:: is_a (field)

  **is_a**: (optional) :ref:`NX_CHAR <NX_CHAR>` (Rank: 1, Dimensions: [n_edges]) 

    .. collapse:: A human-readable qualifier which type or e.g. class instance the ...

        A human-readable qualifier which type or e.g. class instance the
        edge is an instance of.

  .. _/NXgraph_edge_set/label-field:

  .. index:: label (field)

  **label**: (optional) :ref:`NX_CHAR <NX_CHAR>` (Rank: 1, Dimensions: [n_edges]) 

    A human-readable label/caption/tag of each edge.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXgraph_edge_set/directionality-field </NXgraph_edge_set/directionality-field>`
* :ref:`/NXgraph_edge_set/identifier-field </NXgraph_edge_set/identifier-field>`
* :ref:`/NXgraph_edge_set/identifier_offset-field </NXgraph_edge_set/identifier_offset-field>`
* :ref:`/NXgraph_edge_set/is_a-field </NXgraph_edge_set/is_a-field>`
* :ref:`/NXgraph_edge_set/label-field </NXgraph_edge_set/label-field>`
* :ref:`/NXgraph_edge_set/node_pair-field </NXgraph_edge_set/node_pair-field>`
* :ref:`/NXgraph_edge_set/number_of_edges-field </NXgraph_edge_set/number_of_edges-field>`
* :ref:`/NXgraph_edge_set@depends_on-attribute </NXgraph_edge_set@depends_on-attribute>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXgraph_edge_set.nxdl.xml

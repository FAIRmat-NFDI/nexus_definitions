.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXcs_filter_boolean_mask.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXcs_filter_boolean_mask (base class)
    ! cs_filter_boolean_mask (base class)
    see: cs_filter_boolean_mask (base class); NXcs_filter_boolean_mask

.. _NXcs_filter_boolean_mask:

========================
NXcs_filter_boolean_mask
========================

**Status**:

  base class, extends :ref:`NXobject`

**Description**:

  .. collapse:: Base class for packing and unpacking booleans. ...

      Base class for packing and unpacking booleans.

      This base class bookkeeps metadata to inform software about necessary modulo
      operations to decode e.g. set membership of objects in sets which are encoded
      as a packed array of boolean values.

      One use case is processing of object sets (e.g. point cloud data). If e.g. a
      spatial filter has been applied to a set of points we may wish to store
      document efficiently which points were analyzed. Array of boolean values
      is one option to achieve this. A value is true if the point is included.
      The resulting boolean array will be filled with true and false values
      in a manner that is often arbitrary and in general case-dependent.

      Especially when the number of points is large, for instance several thousands
      or more, some situations can be more efficiently stored if one does not store
      the boolean array but just lists the identifiers of the points taken.

      For example, if within a set of 1000 points only one point is included, it would
      take (naively) 4000 bits to store the array but only 32 bits to store e.g. the
      ID of the single point that is taken. Of course the 4000 bit field is so
      sparse that it could be compressed resulting also in a substantial reduction
      of the storage demands. Therefore, boolean masks are useful in that
      they store compact representation of set memberships.

      This base class can deal with the situation when the number of objects
      is not an integer multiple of the bit depth used for storing the states.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **n_objs**: Number of entries (e.g. number of points or objects).

  **bitdepth**: Number of bits assumed for the container datatype used.

  **n_total**: Length of mask considering the eventual need for padding.

**Groups cited**:
  none

**Structure**:

  .. _/NXcs_filter_boolean_mask@depends_on-attribute:

  .. index:: depends_on (file attribute)

  **@depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>` 

    .. collapse:: Possibility to refer to which set this mask applies. ...

        Possibility to refer to which set this mask applies.

        If depends_on is not provided, it is assumed that the mask
        applies to its direct parent.

  .. _/NXcs_filter_boolean_mask/number_of_objects-field:

  .. index:: number_of_objects (field)

  **number_of_objects**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    Number of objects represented by the mask.

  .. _/NXcs_filter_boolean_mask/bitdepth-field:

  .. index:: bitdepth (field)

  **bitdepth**: (optional) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Number of bits assumed matching on a default datatype. ...

        Number of bits assumed matching on a default datatype.
        (e.g. 8 bits for a C-style uint8).

  .. _/NXcs_filter_boolean_mask/mask-field:

  .. index:: mask (field)

  **mask**: (optional) :ref:`NX_UINT <NX_UINT>` (Rank: 1, Dimensions: [n_total]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: The content of the mask. If padding is used,  ...

        The content of the mask. If padding is used, 
        padding bits have to be set to 0.

  .. _/NXcs_filter_boolean_mask/identifier-field:

  .. index:: identifier (field)

  **identifier**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_object]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Link to/or array of identifiers for the objects. The decoded mask is ...

        Link to/or array of identifiers for the objects. The decoded mask is
        interpreted consecutively, i.e. the first bit in the mask matches
        to the first identifier, the second bit in the mask to the second
        identifier and so on and so forth. Resolving of identifier follows
        the conventions made for depends_on, so consult also the description
        of th content to which depends_on refers.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXcs_filter_boolean_mask/bitdepth-field </NXcs_filter_boolean_mask/bitdepth-field>`
* :ref:`/NXcs_filter_boolean_mask/identifier-field </NXcs_filter_boolean_mask/identifier-field>`
* :ref:`/NXcs_filter_boolean_mask/mask-field </NXcs_filter_boolean_mask/mask-field>`
* :ref:`/NXcs_filter_boolean_mask/number_of_objects-field </NXcs_filter_boolean_mask/number_of_objects-field>`
* :ref:`/NXcs_filter_boolean_mask@depends_on-attribute </NXcs_filter_boolean_mask@depends_on-attribute>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXcs_filter_boolean_mask.nxdl.xml

.. auto-generated by dev_tools.docs.nxdl from the NXDL source contributed_definitions/NXapm_charge_state_analysis.nxdl.xml -- DO NOT EDIT

.. index::
    ! NXapm_charge_state_analysis (base class)
    ! apm_charge_state_analysis (base class)
    see: apm_charge_state_analysis (base class); NXapm_charge_state_analysis

.. _NXapm_charge_state_analysis:

===========================
NXapm_charge_state_analysis
===========================

**Status**:

  base class, extends :ref:`NXprocess`

**Description**:

  .. collapse:: Base class to document an algorithm for recovering charge state and nuclide comp ...

      Base class to document an algorithm for recovering charge state and nuclide composition of a (molecular) ion.

      Currently ranging definitions in the research field of atom probe face have limitations:

      1. A ranging definition maps all signal within a mass-to-charge-state-ratio value interval
         on one iontype. Facing limited mass-resolving-power, there are mass-to-charge-state-ratio
         values, though, for which not only multiple (molecular) ions are indistinguishable but
         also for which the current practice of documenting classical ranging definitions is incomplete.
      2. Indeed, ranging definitions often report only (for each interval) the
         mass-to-charge-state-ratio intervals surplus the composition of elements
         that build the (molecular) ion.
      3. Therefore, classical ranging definitions demand a post-processing with an algorithm
         which can identify nuclides from which the (molecular) ion is constructed
         and a charge state possibly recovered. Combinatorial algorithms are used for this purpose.

      This base class documents the configuration and results of such an algorithm.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **n_cand**: The number of also possible but different (molecular) ions.

  **n_ivec_max**: Maximum number of allowed atoms per (molecular) ion (fragment).

**Groups cited**:
  none

**Structure**:

  .. _/NXapm_charge_state_analysis/nuclides-field:

  .. index:: nuclides (field)

  **nuclides**: (optional) :ref:`NX_UINT <NX_UINT>` (Rank: 1, Dimensions: [i]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Input constraint, list of nuclide_hash for typically elements used for the ...

        Input constraint, list of nuclide_hash for typically elements used for the
        ranging definition of the ion whose charge state the analyses covered.
        The list contains each hash as many times as its multiplicity.
        Nuclides are encoded using the hashing rule that is defined in :ref:`NXion`.

        As an example, a ranging definition H:2 O:1 is configured by setting nuclides to
        a list with entries :math:`1 + 0 \cdot 256`, :math:`1 + 0 \cdot 256`, :math:`8 + 0 \cdot 256`.
        An empty list does not release the constraint. Instead, a list with all elements
        in the periodic table (encoded as nuclide_hash values) should be used, i.e.
        :math:`1 + 0 \cdot 256`, :math:`2 + 0 \cdot 256`, and so on and so forth.

        Keep in mind that with a weakly constrained parameter space the combinatorial
        analysis may become very time consuming!

  .. _/NXapm_charge_state_analysis/mass_to_charge_range-field:

  .. index:: mass_to_charge_range (field)

  **mass_to_charge_range**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` (Rank: 2, Dimensions: [1, 2]) {units=\ :ref:`NX_ANY <NX_ANY>`} 

    .. collapse:: Input constraint, interval within which (molecular) ions need to have the ...

        Input constraint, interval within which (molecular) ions need to have the
        mass-to-charge-state-ratio such that an ion qualifies as a candidate.

  .. _/NXapm_charge_state_analysis/min_half_life-field:

  .. index:: min_half_life (field)

  **min_half_life**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`} 

    .. collapse:: Input constraint, minimum half life for how long each nuclide of each ...

        Input constraint, minimum half life for how long each nuclide of each
        (molecular) ion needs to be stable such that the ion qualifies as a candidate.

  .. _/NXapm_charge_state_analysis/min_abundance-field:

  .. index:: min_abundance (field)

  **min_abundance**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

    .. collapse:: Input constraint, minimum natural abundance of each nuclide of each ...

        Input constraint, minimum natural abundance of each nuclide of each
        (molecular) ion such that the ion qualifies as a candidate.

  .. _/NXapm_charge_state_analysis/sacrifice_isotopic_uniqueness-field:

  .. index:: sacrifice_isotopic_uniqueness (field)

  **sacrifice_isotopic_uniqueness**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>` 

    .. collapse:: If the value is false, it means that non-unique solutions are accepted. ...

        If the value is false, it means that non-unique solutions are accepted.
        These are solutions where multiple candidates have been built from
        different nuclide instances but the charge_state of all the ions is the same.

  .. _/NXapm_charge_state_analysis/charge_state-field:

  .. index:: charge_state (field)

  **charge_state**: (optional) :ref:`NX_INT <NX_INT>` (Rank: 1, Dimensions: [n_cand]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Signed charge, i.e. integer multiple of the elementary ...

        Signed charge, i.e. integer multiple of the elementary
        charge of each candidate.

  .. _/NXapm_charge_state_analysis/nuclide_hash-field:

  .. index:: nuclide_hash (field)

  **nuclide_hash**: (optional) :ref:`NX_UINT <NX_UINT>` (Rank: 2, Dimensions: [n_cand, n_ivec_max]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`} 

    .. collapse:: Table of nuclide instances of which each candidate is composed. ...

        Table of nuclide instances of which each candidate is composed.
        Each row vector is sorted in descending order. Unused values are nullified.

  .. _/NXapm_charge_state_analysis/mass-field:

  .. index:: mass (field)

  **mass**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` (Rank: 1, Dimensions: [n_cand]) {units=\ :ref:`NX_MASS <NX_MASS>`} 

    .. collapse:: Accumulated mass of the nuclides in each candidate. ...

        Accumulated mass of the nuclides in each candidate.
        Not corrected for quantum effects.

  .. _/NXapm_charge_state_analysis/natural_abundance_product-field:

  .. index:: natural_abundance_product (field)

  **natural_abundance_product**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` (Rank: 1, Dimensions: [n_cand]) {units=\ :ref:`NX_DIMENSIONLESS <NX_DIMENSIONLESS>`} 

    The product of the natural abundances of the nuclides for each candidate.

  .. _/NXapm_charge_state_analysis/shortest_half_life-field:

  .. index:: shortest_half_life (field)

  **shortest_half_life**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` (Rank: 1, Dimensions: [n_cand]) {units=\ :ref:`NX_TIME <NX_TIME>`} 

    .. collapse:: For each candidate the half life of that nuclide which has the shortest half ...

        For each candidate the half life of that nuclide which has the shortest half
        life.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXapm_charge_state_analysis/charge_state-field </NXapm_charge_state_analysis/charge_state-field>`
* :ref:`/NXapm_charge_state_analysis/mass-field </NXapm_charge_state_analysis/mass-field>`
* :ref:`/NXapm_charge_state_analysis/mass_to_charge_range-field </NXapm_charge_state_analysis/mass_to_charge_range-field>`
* :ref:`/NXapm_charge_state_analysis/min_abundance-field </NXapm_charge_state_analysis/min_abundance-field>`
* :ref:`/NXapm_charge_state_analysis/min_half_life-field </NXapm_charge_state_analysis/min_half_life-field>`
* :ref:`/NXapm_charge_state_analysis/natural_abundance_product-field </NXapm_charge_state_analysis/natural_abundance_product-field>`
* :ref:`/NXapm_charge_state_analysis/nuclide_hash-field </NXapm_charge_state_analysis/nuclide_hash-field>`
* :ref:`/NXapm_charge_state_analysis/nuclides-field </NXapm_charge_state_analysis/nuclides-field>`
* :ref:`/NXapm_charge_state_analysis/sacrifice_isotopic_uniqueness-field </NXapm_charge_state_analysis/sacrifice_isotopic_uniqueness-field>`
* :ref:`/NXapm_charge_state_analysis/shortest_half_life-field </NXapm_charge_state_analysis/shortest_half_life-field>`

**NXDL Source**:
  https://github.com/FAIRmat-NFDI/nexus_definitions/tree/fairmat/contributed_definitions/NXapm_charge_state_analysis.nxdl.xml
